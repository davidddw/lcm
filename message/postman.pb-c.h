/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: postman.proto */

#ifndef PROTOBUF_C_postman_2eproto__INCLUDED
#define PROTOBUF_C_postman_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Postman__Policy Postman__Policy;
typedef struct _Postman__MailIdentity Postman__MailIdentity;
typedef struct _Postman__AlarmEvent Postman__AlarmEvent;
typedef struct _Postman__LicenseExpireEvent Postman__LicenseExpireEvent;
typedef struct _Postman__ServiceExpireEvent Postman__ServiceExpireEvent;
typedef struct _Postman__ResourceEvent Postman__ResourceEvent;
typedef struct _Postman__ServiceChargeEvent Postman__ServiceChargeEvent;
typedef struct _Postman__InstanceChargeEvent Postman__InstanceChargeEvent;
typedef struct _Postman__UserBalanceEvent Postman__UserBalanceEvent;
typedef struct _Postman__NetResourceUsage Postman__NetResourceUsage;
typedef struct _Postman__UserUsageFormEvent Postman__UserUsageFormEvent;
typedef struct _Postman__UserChargeFormEvent Postman__UserChargeFormEvent;
typedef struct _Postman__MailContent Postman__MailContent;
typedef struct _Postman__Mail Postman__Mail;
typedef struct _Postman__SendRequest Postman__SendRequest;
typedef struct _Postman__Message Postman__Message;


/* --- enums --- */

typedef enum _Postman__Priority {
  POSTMAN__PRIORITY__NORMAL = 0,
  POSTMAN__PRIORITY__URGENT = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POSTMAN__PRIORITY)
} Postman__Priority;
typedef enum _Postman__Event {
  POSTMAN__EVENT__NONE_EVENT = 0,
  POSTMAN__EVENT__EVENT_FLIP_SIGN = 268435456,
  POSTMAN__EVENT__CPU_HIGH = 1,
  POSTMAN__EVENT__CPU_HIGH_OVER = 268435457,
  POSTMAN__EVENT__TRAFFIC_HIGH = 2,
  POSTMAN__EVENT__TRAFFIC_HIGH_OVER = 268435458,
  POSTMAN__EVENT__HOST_DISCONN = 3,
  POSTMAN__EVENT__HOST_DISCONN_OVER = 268435459,
  POSTMAN__EVENT__HOST_MAINTENANCE = 4,
  POSTMAN__EVENT__HOST_MAINTENANCE_OVER = 268435460,
  POSTMAN__EVENT__HOST_MEM_HIGH = 5,
  POSTMAN__EVENT__HOST_MEM_HIGH_OVER = 268435461,
  POSTMAN__EVENT__HOST_DISK_HIGH = 6,
  POSTMAN__EVENT__HOST_DISK_HIGH_OVER = 268435462,
  POSTMAN__EVENT__HOST_CPU_HIGH = 7,
  POSTMAN__EVENT__HOST_CPU_HIGH_OVER = 268435463,
  POSTMAN__EVENT__VM_STATE_CHG = 8,
  POSTMAN__EVENT__VM_STATE_CHG_OVER = 268435464,
  POSTMAN__EVENT__RACK_EXPIRED = 9,
  POSTMAN__EVENT__VM_EXPIRED = 10,
  POSTMAN__EVENT__DRBD_SPLIT_BRAIN = 11,
  POSTMAN__EVENT__VM_RESTORE = 12,
  POSTMAN__EVENT__USER_CHARGE = 13,
  POSTMAN__EVENT__NSP_FAIL = 14,
  POSTMAN__EVENT__NSP_FAIL_OVER = 268435470,
  POSTMAN__EVENT__USER_MAIL = 15,
  POSTMAN__EVENT__TALKER_CB_NSP_BOOTUP = 16,
  POSTMAN__EVENT__TALKER_CONF_INTERFACE = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POSTMAN__EVENT)
} Postman__Event;
typedef enum _Postman__Resource {
  POSTMAN__RESOURCE__NONE_RESOURCE = 0,
  POSTMAN__RESOURCE__HOST = 1,
  POSTMAN__RESOURCE__VGW = 2,
  POSTMAN__RESOURCE__VM = 3,
  POSTMAN__RESOURCE__RACK = 4,
  POSTMAN__RESOURCE__VMWAF = 5,
  POSTMAN__RESOURCE__CHARGE = 6,
  POSTMAN__RESOURCE__USER = 7,
  POSTMAN__RESOURCE__VGATEWAY = 8,
  POSTMAN__RESOURCE__VINTERFACE = 9,
  POSTMAN__RESOURCE__VALVE = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POSTMAN__RESOURCE)
} Postman__Resource;
typedef enum _Postman__AggregateId {
  POSTMAN__AGGREGATE_ID__AGG_NO_AGGREGATE = 0,
  POSTMAN__AGGREGATE_ID__AGG_ALARM_EVENT = 1,
  POSTMAN__AGGREGATE_ID__AGG_ALARM_OVER_EVENT = 2,
  POSTMAN__AGGREGATE_ID__AGG_HOST_USAGE_ALARM_EVENT = 3,
  POSTMAN__AGGREGATE_ID__AGG_VM_USAGE_ALARM_EVENT = 4,
  POSTMAN__AGGREGATE_ID__AGG_VM_RESTORE = 5,
  POSTMAN__AGGREGATE_ID__AGG_TALKER_CB_NSP_BOOTUP = 6,
  POSTMAN__AGGREGATE_ID__AGG_TALKER_CONF_INTERFACE = 7,
  POSTMAN__AGGREGATE_ID__AGG_BUNDLE_SEND_REQUEST = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POSTMAN__AGGREGATE_ID)
} Postman__AggregateId;
typedef enum _Postman__MailType {
  POSTMAN__MAIL_TYPE__NONE_MAIL_TYPE = 0,
  /*
   * different mailtype use different template 
   */
  POSTMAN__MAIL_TYPE__ALARM_MAIL = 1,
  POSTMAN__MAIL_TYPE__ALARM_OVER_MAIL = 2,
  POSTMAN__MAIL_TYPE__NOTIFY_MAIL = 3,
  POSTMAN__MAIL_TYPE__NOTIFY_OVER_MAIL = 4,
  POSTMAN__MAIL_TYPE__LICENSE_EXPIRE_MAIL = 5,
  POSTMAN__MAIL_TYPE__SERVICE_EXPIRE_MAIL = 6,
  POSTMAN__MAIL_TYPE__USER_USAGE_FORM_MAIL = 7,
  POSTMAN__MAIL_TYPE__USER_CHARGE_FORM_MAIL = 8,
  POSTMAN__MAIL_TYPE__RAW_STRING = 9,
  POSTMAN__MAIL_TYPE__BALANCE_LACKED_MAIL = 10,
  POSTMAN__MAIL_TYPE__BALANCE_SOON_LACK_MAIL = 11,
  POSTMAN__MAIL_TYPE__BALANCE_LACKED_SUMMARY_MAIL = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POSTMAN__MAIL_TYPE)
} Postman__MailType;

/* --- messages --- */

struct  _Postman__Policy
{
  ProtobufCMessage base;
  protobuf_c_boolean has_priority;
  Postman__Priority priority;
  protobuf_c_boolean has_aggregate_id;
  Postman__AggregateId aggregate_id;
  protobuf_c_boolean has_aggregate_window;
  uint32_t aggregate_window;
  protobuf_c_boolean has_min_event_interval;
  uint32_t min_event_interval;
  protobuf_c_boolean has_min_dest_interval;
  uint32_t min_dest_interval;
  protobuf_c_boolean has_issue_timestamp;
  uint32_t issue_timestamp;
};
#define POSTMAN__POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__policy__descriptor) \
    , 0,POSTMAN__PRIORITY__NORMAL, 0,POSTMAN__AGGREGATE_ID__AGG_NO_AGGREGATE, 0,0u, 0,0u, 0,0u, 0,0 }


struct  _Postman__MailIdentity
{
  ProtobufCMessage base;
  protobuf_c_boolean has_event_type;
  Postman__Event event_type;
  protobuf_c_boolean has_resource_type;
  Postman__Resource resource_type;
  protobuf_c_boolean has_resource_id;
  uint32_t resource_id;
};
#define POSTMAN__MAIL_IDENTITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__mail_identity__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Postman__AlarmEvent
{
  ProtobufCMessage base;
  char *resource_type;
  char *resource_name;
  protobuf_c_boolean has_alarm_begin;
  uint32_t alarm_begin;
  protobuf_c_boolean has_alarm_last;
  uint32_t alarm_last;
  char *alarm_message;
};
#define POSTMAN__ALARM_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__alarm_event__descriptor) \
    , NULL, NULL, 0,0, 0,0, NULL }


struct  _Postman__LicenseExpireEvent
{
  ProtobufCMessage base;
  char *host_ip;
  protobuf_c_boolean has_host_count;
  uint32_t host_count;
  protobuf_c_boolean has_host_vm_count;
  uint32_t host_vm_count;
  char *rack_name;
  char *rack_location;
  protobuf_c_boolean has_rack_usage_days;
  uint32_t rack_usage_days;
  protobuf_c_boolean has_activate_time;
  uint32_t activate_time;
  protobuf_c_boolean has_expire_time;
  uint32_t expire_time;
  protobuf_c_boolean has_host_limit;
  uint32_t host_limit;
  protobuf_c_boolean has_domain_id;
  uint32_t domain_id;
  char *domain;
};
#define POSTMAN__LICENSE_EXPIRE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__license_expire_event__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Postman__ServiceExpireEvent
{
  ProtobufCMessage base;
  char *resource_type;
  char *resource_name;
  char *resource_id;
  protobuf_c_boolean has_create_time;
  uint32_t create_time;
  char *resource_state;
  protobuf_c_boolean has_vcpu_num;
  uint32_t vcpu_num;
  protobuf_c_boolean has_mem_size;
  uint32_t mem_size;
  protobuf_c_boolean has_vdi_sys_size;
  uint32_t vdi_sys_size;
  protobuf_c_boolean has_vdi_user_size;
  uint32_t vdi_user_size;
  char *remark;
  protobuf_c_boolean has_domain_id;
  uint32_t domain_id;
  char *domain;
};
#define POSTMAN__SERVICE_EXPIRE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__service_expire_event__descriptor) \
    , NULL, NULL, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL }


struct  _Postman__ResourceEvent
{
  ProtobufCMessage base;
  char *resource_type;
  char *resource_name;
  protobuf_c_boolean has_operate_time;
  uint32_t operate_time;
  char *operate_type;
  char *remark;
};
#define POSTMAN__RESOURCE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__resource_event__descriptor) \
    , NULL, NULL, 0,0, NULL, NULL }


struct  _Postman__ServiceChargeEvent
{
  ProtobufCMessage base;
  char *service_name;
  char *instance_name;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
  protobuf_c_boolean has_end_time;
  uint32_t end_time;
  protobuf_c_boolean has_size;
  uint32_t size;
  char *cumulative_time;
  char *price;
  char *settlement_amount;
  char *remark;
  protobuf_c_boolean has_domain_id;
  uint32_t domain_id;
  char *domain;
};
#define POSTMAN__SERVICE_CHARGE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__service_charge_event__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, NULL }


struct  _Postman__InstanceChargeEvent
{
  ProtobufCMessage base;
  char *instance_name;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
  protobuf_c_boolean has_end_time;
  uint32_t end_time;
  char *cumulative_time;
  char *price;
  char *settlement_amount;
  char *remark;
  char *type;
  protobuf_c_boolean has_domain_id;
  uint32_t domain_id;
  char *domain;
};
#define POSTMAN__INSTANCE_CHARGE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__instance_charge_event__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, 0,0, NULL }


struct  _Postman__UserBalanceEvent
{
  ProtobufCMessage base;
  char *username;
  char *email;
  char *balance;
  char *company;
  char *phone_num;
  char *user_type;
};
#define POSTMAN__USER_BALANCE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__user_balance_event__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Postman__NetResourceUsage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_domain_id;
  uint32_t domain_id;
  char *domain;
  char *isp_name;
  char *bandwidth;
  protobuf_c_boolean has_isp_count;
  uint32_t isp_count;
};
#define POSTMAN__NET_RESOURCE_USAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__net_resource_usage__descriptor) \
    , 0,0, NULL, NULL, NULL, 0,0 }


struct  _Postman__UserUsageFormEvent
{
  ProtobufCMessage base;
  char *username;
  char *company;
  char *industry;
  char *contact;
  char *phone;
  protobuf_c_boolean has_create_time;
  uint32_t create_time;
  char *isp_name;
  char *bandwidth;
  protobuf_c_boolean has_isp_count;
  uint32_t isp_count;
  size_t n_vms;
  Postman__ServiceExpireEvent **vms;
  size_t n_events;
  Postman__ResourceEvent **events;
  size_t n_nets;
  Postman__NetResourceUsage **nets;
};
#define POSTMAN__USER_USAGE_FORM_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__user_usage_form_event__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, NULL, NULL, 0,0, 0,NULL, 0,NULL, 0,NULL }


struct  _Postman__UserChargeFormEvent
{
  ProtobufCMessage base;
  char *username;
  char *company;
  char *industry;
  char *contact;
  char *phone;
  protobuf_c_boolean has_create_time;
  uint32_t create_time;
  char *balance;
  char *daily_account;
  char *available_time;
  size_t n_services;
  Postman__ServiceChargeEvent **services;
  size_t n_instances;
  Postman__InstanceChargeEvent **instances;
  size_t n_user_balances;
  Postman__UserBalanceEvent **user_balances;
};
#define POSTMAN__USER_CHARGE_FORM_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__user_charge_form_event__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, NULL, NULL, NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Postman__MailContent
{
  ProtobufCMessage base;
  /*
   * file name in template dir 
   */
  char *head_template;
  /*
   * file name in template dir 
   */
  char *tail_template;
  size_t n_attachments;
  char **attachments;
  /*
   * the mail body 
   */
  protobuf_c_boolean has_mail_type;
  Postman__MailType mail_type;
  size_t n_alarms;
  Postman__AlarmEvent **alarms;
  size_t n_license_expires;
  Postman__LicenseExpireEvent **license_expires;
  size_t n_service_expires;
  Postman__ServiceExpireEvent **service_expires;
  Postman__UserUsageFormEvent *user_usage_form;
  Postman__UserChargeFormEvent *user_charge_form;
  char *raw_string;
};
#define POSTMAN__MAIL_CONTENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__mail_content__descriptor) \
    , NULL, NULL, 0,NULL, 0,0, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, NULL }


struct  _Postman__Mail
{
  ProtobufCMessage base;
  char *from;
  char *to;
  char *cc;
  char *bcc;
  char *subject;
  char *customer_name;
  Postman__MailContent *content;
};
#define POSTMAN__MAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__mail__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Postman__SendRequest
{
  ProtobufCMessage base;
  Postman__Policy *policy;
  Postman__MailIdentity *id;
  Postman__Mail *mail;
};
#define POSTMAN__SEND_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__send_request__descriptor) \
    , NULL, NULL, NULL }


struct  _Postman__Message
{
  ProtobufCMessage base;
  Postman__SendRequest *send_request;
};
#define POSTMAN__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&postman__message__descriptor) \
    , NULL }


/* Postman__Policy methods */
void   postman__policy__init
                     (Postman__Policy         *message);
size_t postman__policy__get_packed_size
                     (const Postman__Policy   *message);
size_t postman__policy__pack
                     (const Postman__Policy   *message,
                      uint8_t             *out);
size_t postman__policy__pack_to_buffer
                     (const Postman__Policy   *message,
                      ProtobufCBuffer     *buffer);
Postman__Policy *
       postman__policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__policy__free_unpacked
                     (Postman__Policy *message,
                      ProtobufCAllocator *allocator);
/* Postman__MailIdentity methods */
void   postman__mail_identity__init
                     (Postman__MailIdentity         *message);
size_t postman__mail_identity__get_packed_size
                     (const Postman__MailIdentity   *message);
size_t postman__mail_identity__pack
                     (const Postman__MailIdentity   *message,
                      uint8_t             *out);
size_t postman__mail_identity__pack_to_buffer
                     (const Postman__MailIdentity   *message,
                      ProtobufCBuffer     *buffer);
Postman__MailIdentity *
       postman__mail_identity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__mail_identity__free_unpacked
                     (Postman__MailIdentity *message,
                      ProtobufCAllocator *allocator);
/* Postman__AlarmEvent methods */
void   postman__alarm_event__init
                     (Postman__AlarmEvent         *message);
size_t postman__alarm_event__get_packed_size
                     (const Postman__AlarmEvent   *message);
size_t postman__alarm_event__pack
                     (const Postman__AlarmEvent   *message,
                      uint8_t             *out);
size_t postman__alarm_event__pack_to_buffer
                     (const Postman__AlarmEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__AlarmEvent *
       postman__alarm_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__alarm_event__free_unpacked
                     (Postman__AlarmEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__LicenseExpireEvent methods */
void   postman__license_expire_event__init
                     (Postman__LicenseExpireEvent         *message);
size_t postman__license_expire_event__get_packed_size
                     (const Postman__LicenseExpireEvent   *message);
size_t postman__license_expire_event__pack
                     (const Postman__LicenseExpireEvent   *message,
                      uint8_t             *out);
size_t postman__license_expire_event__pack_to_buffer
                     (const Postman__LicenseExpireEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__LicenseExpireEvent *
       postman__license_expire_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__license_expire_event__free_unpacked
                     (Postman__LicenseExpireEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__ServiceExpireEvent methods */
void   postman__service_expire_event__init
                     (Postman__ServiceExpireEvent         *message);
size_t postman__service_expire_event__get_packed_size
                     (const Postman__ServiceExpireEvent   *message);
size_t postman__service_expire_event__pack
                     (const Postman__ServiceExpireEvent   *message,
                      uint8_t             *out);
size_t postman__service_expire_event__pack_to_buffer
                     (const Postman__ServiceExpireEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__ServiceExpireEvent *
       postman__service_expire_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__service_expire_event__free_unpacked
                     (Postman__ServiceExpireEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__ResourceEvent methods */
void   postman__resource_event__init
                     (Postman__ResourceEvent         *message);
size_t postman__resource_event__get_packed_size
                     (const Postman__ResourceEvent   *message);
size_t postman__resource_event__pack
                     (const Postman__ResourceEvent   *message,
                      uint8_t             *out);
size_t postman__resource_event__pack_to_buffer
                     (const Postman__ResourceEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__ResourceEvent *
       postman__resource_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__resource_event__free_unpacked
                     (Postman__ResourceEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__ServiceChargeEvent methods */
void   postman__service_charge_event__init
                     (Postman__ServiceChargeEvent         *message);
size_t postman__service_charge_event__get_packed_size
                     (const Postman__ServiceChargeEvent   *message);
size_t postman__service_charge_event__pack
                     (const Postman__ServiceChargeEvent   *message,
                      uint8_t             *out);
size_t postman__service_charge_event__pack_to_buffer
                     (const Postman__ServiceChargeEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__ServiceChargeEvent *
       postman__service_charge_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__service_charge_event__free_unpacked
                     (Postman__ServiceChargeEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__InstanceChargeEvent methods */
void   postman__instance_charge_event__init
                     (Postman__InstanceChargeEvent         *message);
size_t postman__instance_charge_event__get_packed_size
                     (const Postman__InstanceChargeEvent   *message);
size_t postman__instance_charge_event__pack
                     (const Postman__InstanceChargeEvent   *message,
                      uint8_t             *out);
size_t postman__instance_charge_event__pack_to_buffer
                     (const Postman__InstanceChargeEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__InstanceChargeEvent *
       postman__instance_charge_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__instance_charge_event__free_unpacked
                     (Postman__InstanceChargeEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__UserBalanceEvent methods */
void   postman__user_balance_event__init
                     (Postman__UserBalanceEvent         *message);
size_t postman__user_balance_event__get_packed_size
                     (const Postman__UserBalanceEvent   *message);
size_t postman__user_balance_event__pack
                     (const Postman__UserBalanceEvent   *message,
                      uint8_t             *out);
size_t postman__user_balance_event__pack_to_buffer
                     (const Postman__UserBalanceEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__UserBalanceEvent *
       postman__user_balance_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__user_balance_event__free_unpacked
                     (Postman__UserBalanceEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__NetResourceUsage methods */
void   postman__net_resource_usage__init
                     (Postman__NetResourceUsage         *message);
size_t postman__net_resource_usage__get_packed_size
                     (const Postman__NetResourceUsage   *message);
size_t postman__net_resource_usage__pack
                     (const Postman__NetResourceUsage   *message,
                      uint8_t             *out);
size_t postman__net_resource_usage__pack_to_buffer
                     (const Postman__NetResourceUsage   *message,
                      ProtobufCBuffer     *buffer);
Postman__NetResourceUsage *
       postman__net_resource_usage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__net_resource_usage__free_unpacked
                     (Postman__NetResourceUsage *message,
                      ProtobufCAllocator *allocator);
/* Postman__UserUsageFormEvent methods */
void   postman__user_usage_form_event__init
                     (Postman__UserUsageFormEvent         *message);
size_t postman__user_usage_form_event__get_packed_size
                     (const Postman__UserUsageFormEvent   *message);
size_t postman__user_usage_form_event__pack
                     (const Postman__UserUsageFormEvent   *message,
                      uint8_t             *out);
size_t postman__user_usage_form_event__pack_to_buffer
                     (const Postman__UserUsageFormEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__UserUsageFormEvent *
       postman__user_usage_form_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__user_usage_form_event__free_unpacked
                     (Postman__UserUsageFormEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__UserChargeFormEvent methods */
void   postman__user_charge_form_event__init
                     (Postman__UserChargeFormEvent         *message);
size_t postman__user_charge_form_event__get_packed_size
                     (const Postman__UserChargeFormEvent   *message);
size_t postman__user_charge_form_event__pack
                     (const Postman__UserChargeFormEvent   *message,
                      uint8_t             *out);
size_t postman__user_charge_form_event__pack_to_buffer
                     (const Postman__UserChargeFormEvent   *message,
                      ProtobufCBuffer     *buffer);
Postman__UserChargeFormEvent *
       postman__user_charge_form_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__user_charge_form_event__free_unpacked
                     (Postman__UserChargeFormEvent *message,
                      ProtobufCAllocator *allocator);
/* Postman__MailContent methods */
void   postman__mail_content__init
                     (Postman__MailContent         *message);
size_t postman__mail_content__get_packed_size
                     (const Postman__MailContent   *message);
size_t postman__mail_content__pack
                     (const Postman__MailContent   *message,
                      uint8_t             *out);
size_t postman__mail_content__pack_to_buffer
                     (const Postman__MailContent   *message,
                      ProtobufCBuffer     *buffer);
Postman__MailContent *
       postman__mail_content__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__mail_content__free_unpacked
                     (Postman__MailContent *message,
                      ProtobufCAllocator *allocator);
/* Postman__Mail methods */
void   postman__mail__init
                     (Postman__Mail         *message);
size_t postman__mail__get_packed_size
                     (const Postman__Mail   *message);
size_t postman__mail__pack
                     (const Postman__Mail   *message,
                      uint8_t             *out);
size_t postman__mail__pack_to_buffer
                     (const Postman__Mail   *message,
                      ProtobufCBuffer     *buffer);
Postman__Mail *
       postman__mail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__mail__free_unpacked
                     (Postman__Mail *message,
                      ProtobufCAllocator *allocator);
/* Postman__SendRequest methods */
void   postman__send_request__init
                     (Postman__SendRequest         *message);
size_t postman__send_request__get_packed_size
                     (const Postman__SendRequest   *message);
size_t postman__send_request__pack
                     (const Postman__SendRequest   *message,
                      uint8_t             *out);
size_t postman__send_request__pack_to_buffer
                     (const Postman__SendRequest   *message,
                      ProtobufCBuffer     *buffer);
Postman__SendRequest *
       postman__send_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__send_request__free_unpacked
                     (Postman__SendRequest *message,
                      ProtobufCAllocator *allocator);
/* Postman__Message methods */
void   postman__message__init
                     (Postman__Message         *message);
size_t postman__message__get_packed_size
                     (const Postman__Message   *message);
size_t postman__message__pack
                     (const Postman__Message   *message,
                      uint8_t             *out);
size_t postman__message__pack_to_buffer
                     (const Postman__Message   *message,
                      ProtobufCBuffer     *buffer);
Postman__Message *
       postman__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   postman__message__free_unpacked
                     (Postman__Message *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Postman__Policy_Closure)
                 (const Postman__Policy *message,
                  void *closure_data);
typedef void (*Postman__MailIdentity_Closure)
                 (const Postman__MailIdentity *message,
                  void *closure_data);
typedef void (*Postman__AlarmEvent_Closure)
                 (const Postman__AlarmEvent *message,
                  void *closure_data);
typedef void (*Postman__LicenseExpireEvent_Closure)
                 (const Postman__LicenseExpireEvent *message,
                  void *closure_data);
typedef void (*Postman__ServiceExpireEvent_Closure)
                 (const Postman__ServiceExpireEvent *message,
                  void *closure_data);
typedef void (*Postman__ResourceEvent_Closure)
                 (const Postman__ResourceEvent *message,
                  void *closure_data);
typedef void (*Postman__ServiceChargeEvent_Closure)
                 (const Postman__ServiceChargeEvent *message,
                  void *closure_data);
typedef void (*Postman__InstanceChargeEvent_Closure)
                 (const Postman__InstanceChargeEvent *message,
                  void *closure_data);
typedef void (*Postman__UserBalanceEvent_Closure)
                 (const Postman__UserBalanceEvent *message,
                  void *closure_data);
typedef void (*Postman__NetResourceUsage_Closure)
                 (const Postman__NetResourceUsage *message,
                  void *closure_data);
typedef void (*Postman__UserUsageFormEvent_Closure)
                 (const Postman__UserUsageFormEvent *message,
                  void *closure_data);
typedef void (*Postman__UserChargeFormEvent_Closure)
                 (const Postman__UserChargeFormEvent *message,
                  void *closure_data);
typedef void (*Postman__MailContent_Closure)
                 (const Postman__MailContent *message,
                  void *closure_data);
typedef void (*Postman__Mail_Closure)
                 (const Postman__Mail *message,
                  void *closure_data);
typedef void (*Postman__SendRequest_Closure)
                 (const Postman__SendRequest *message,
                  void *closure_data);
typedef void (*Postman__Message_Closure)
                 (const Postman__Message *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    postman__priority__descriptor;
extern const ProtobufCEnumDescriptor    postman__event__descriptor;
extern const ProtobufCEnumDescriptor    postman__resource__descriptor;
extern const ProtobufCEnumDescriptor    postman__aggregate_id__descriptor;
extern const ProtobufCEnumDescriptor    postman__mail_type__descriptor;
extern const ProtobufCMessageDescriptor postman__policy__descriptor;
extern const ProtobufCMessageDescriptor postman__mail_identity__descriptor;
extern const ProtobufCMessageDescriptor postman__alarm_event__descriptor;
extern const ProtobufCMessageDescriptor postman__license_expire_event__descriptor;
extern const ProtobufCMessageDescriptor postman__service_expire_event__descriptor;
extern const ProtobufCMessageDescriptor postman__resource_event__descriptor;
extern const ProtobufCMessageDescriptor postman__service_charge_event__descriptor;
extern const ProtobufCMessageDescriptor postman__instance_charge_event__descriptor;
extern const ProtobufCMessageDescriptor postman__user_balance_event__descriptor;
extern const ProtobufCMessageDescriptor postman__net_resource_usage__descriptor;
extern const ProtobufCMessageDescriptor postman__user_usage_form_event__descriptor;
extern const ProtobufCMessageDescriptor postman__user_charge_form_event__descriptor;
extern const ProtobufCMessageDescriptor postman__mail_content__descriptor;
extern const ProtobufCMessageDescriptor postman__mail__descriptor;
extern const ProtobufCMessageDescriptor postman__send_request__descriptor;
extern const ProtobufCMessageDescriptor postman__message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_postman_2eproto__INCLUDED */
