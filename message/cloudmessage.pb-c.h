/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cloudmessage.proto */

#ifndef PROTOBUF_C_cloudmessage_2eproto__INCLUDED
#define PROTOBUF_C_cloudmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Cloudmessage__VMVCenterInfoResp Cloudmessage__VMVCenterInfoResp;
typedef struct _Cloudmessage__VMVCenterInfo Cloudmessage__VMVCenterInfo;
typedef struct _Cloudmessage__Message Cloudmessage__Message;
typedef struct _Cloudmessage__LaunchInfo Cloudmessage__LaunchInfo;
typedef struct _Cloudmessage__IntfInfo Cloudmessage__IntfInfo;
typedef struct _Cloudmessage__VMAddReq Cloudmessage__VMAddReq;
typedef struct _Cloudmessage__VMAddResp Cloudmessage__VMAddResp;
typedef struct _Cloudmessage__VMDeleteReq Cloudmessage__VMDeleteReq;
typedef struct _Cloudmessage__VMDeleteResp Cloudmessage__VMDeleteResp;
typedef struct _Cloudmessage__VMOpsReq Cloudmessage__VMOpsReq;
typedef struct _Cloudmessage__VMOpsResp Cloudmessage__VMOpsResp;
typedef struct _Cloudmessage__VMStats Cloudmessage__VMStats;
typedef struct _Cloudmessage__VMStatsReq Cloudmessage__VMStatsReq;
typedef struct _Cloudmessage__VMStatsResp Cloudmessage__VMStatsResp;
typedef struct _Cloudmessage__VMHAdisk Cloudmessage__VMHAdisk;
typedef struct _Cloudmessage__VMUpdateReq Cloudmessage__VMUpdateReq;
typedef struct _Cloudmessage__VMUpdateResp Cloudmessage__VMUpdateResp;
typedef struct _Cloudmessage__PortUpdateReq Cloudmessage__PortUpdateReq;
typedef struct _Cloudmessage__PortUpdateResp Cloudmessage__PortUpdateResp;
typedef struct _Cloudmessage__StorageInfo Cloudmessage__StorageInfo;
typedef struct _Cloudmessage__HostsInfoReq Cloudmessage__HostsInfoReq;
typedef struct _Cloudmessage__HostsInfoResp Cloudmessage__HostsInfoResp;
typedef struct _Cloudmessage__VMSnapshotAddReq Cloudmessage__VMSnapshotAddReq;
typedef struct _Cloudmessage__VMSnapshotAddResp Cloudmessage__VMSnapshotAddResp;
typedef struct _Cloudmessage__VMSnapshotDelReq Cloudmessage__VMSnapshotDelReq;
typedef struct _Cloudmessage__VMSnapshotDelResp Cloudmessage__VMSnapshotDelResp;
typedef struct _Cloudmessage__VMSnapshotRevertReq Cloudmessage__VMSnapshotRevertReq;
typedef struct _Cloudmessage__VMSnapshotRevertResp Cloudmessage__VMSnapshotRevertResp;
typedef struct _Cloudmessage__VMMigrateReq Cloudmessage__VMMigrateReq;
typedef struct _Cloudmessage__VMMigrateResp Cloudmessage__VMMigrateResp;
typedef struct _Cloudmessage__VifUsage Cloudmessage__VifUsage;
typedef struct _Cloudmessage__VMVifUsage Cloudmessage__VMVifUsage;
typedef struct _Cloudmessage__VMIntfInfo Cloudmessage__VMIntfInfo;
typedef struct _Cloudmessage__VMVifUsageReq Cloudmessage__VMVifUsageReq;
typedef struct _Cloudmessage__VMVifUsageResp Cloudmessage__VMVifUsageResp;
typedef struct _Cloudmessage__VMSetDiskReq Cloudmessage__VMSetDiskReq;
typedef struct _Cloudmessage__VMSetDiskResp Cloudmessage__VMSetDiskResp;
typedef struct _Cloudmessage__PGDeleteReq Cloudmessage__PGDeleteReq;
typedef struct _Cloudmessage__PGDeleteResp Cloudmessage__PGDeleteResp;
typedef struct _Cloudmessage__VmadapterVmLearnReq Cloudmessage__VmadapterVmLearnReq;
typedef struct _Cloudmessage__VmadapterVmLearnReply Cloudmessage__VmadapterVmLearnReply;


/* --- enums --- */

typedef enum _Cloudmessage__IntfInfo__IntfFlag {
  CLOUDMESSAGE__INTF_INFO__INTF_FLAG__LC_INTF_ENABLED = 0,
  CLOUDMESSAGE__INTF_INFO__INTF_FLAG__LC_INTF_STATIC = 1,
  CLOUDMESSAGE__INTF_INFO__INTF_FLAG__LC_INTF_DHCP = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__INTF_INFO__INTF_FLAG)
} Cloudmessage__IntfInfo__IntfFlag;
typedef enum _Cloudmessage__PortUpdateReq__PortUpdateActions {
  CLOUDMESSAGE__PORT_UPDATE_REQ__PORT_UPDATE_ACTIONS__LC_PORT_UPDATE_BANDWIDTH = 1,
  CLOUDMESSAGE__PORT_UPDATE_REQ__PORT_UPDATE_ACTIONS__LC_PORT_UPDATE_VLAN_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__PORT_UPDATE_REQ__PORT_UPDATE_ACTIONS)
} Cloudmessage__PortUpdateReq__PortUpdateActions;
typedef enum _Cloudmessage__StorageInfo__StorageType {
  CLOUDMESSAGE__STORAGE_INFO__STORAGE_TYPE__LC_STORAGE_LOCAL = 1,
  CLOUDMESSAGE__STORAGE_INFO__STORAGE_TYPE__LC_STORAGE_SHARED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__STORAGE_INFO__STORAGE_TYPE)
} Cloudmessage__StorageInfo__StorageType;
typedef enum _Cloudmessage__HostsInfoResp__HostStatus {
  CLOUDMESSAGE__HOSTS_INFO_RESP__HOST_STATUS__LC_HOST_NOT_RESPONDING = 1,
  CLOUDMESSAGE__HOSTS_INFO_RESP__HOST_STATUS__LC_HOST_DISCONNECTED = 2,
  CLOUDMESSAGE__HOSTS_INFO_RESP__HOST_STATUS__LC_HOST_CONNECTED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__HOSTS_INFO_RESP__HOST_STATUS)
} Cloudmessage__HostsInfoResp__HostStatus;
typedef enum _Cloudmessage__VMSnapshotAddReq__VMSnapshotAddFlag {
  CLOUDMESSAGE__VMSNAPSHOT_ADD_REQ__VMSNAPSHOT_ADD_FLAG__LC_VM_SNAPSHOT_ADD_REPLACE_OLD = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__VMSNAPSHOT_ADD_REQ__VMSNAPSHOT_ADD_FLAG)
} Cloudmessage__VMSnapshotAddReq__VMSnapshotAddFlag;
typedef enum _Cloudmessage__VMResultType {
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_SUCCESS = 0,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_FAILURE = -10000,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_TEMPLATE_NOT_FOUND = -1,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_DISK_SPACE_INSUFFICIENT = -2,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_CPU_NOT_ENOUGH = -3,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_INTERFACE_CREATE_ERROR = -4,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_INTERFACE_BIND_ERROR = -5,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_CREATE_ERROR = -6,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_CREATE_MESSAGE_ERROR = -7,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_NOT_FOUND = -8,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_SYS_DISK_ERROR = -9,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_USER_DISK_ERROR = -10,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_MEMORY_NOT_ENOUGH = -11,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_UPDATE_ERROR = -12,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_DELETE_ERROR = -13,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_INTERFACE_UPDATE_ERROR = -14,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_INTERFACE_DELETE_ERROR = -15,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_INTERFACE_UNBIND_ERROR = -16,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_ON_ERROR = -17,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_OFF_ERROR = -18,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_SUSPEND_ERROR = -19,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_EXISTS_ERROR = -20,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_SNAPSHOT_ERROR = -21,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VCENTER_CONNECTED_ERROR = -22,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_VM_MIGRATE_VMOTION_ERROR = -23,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_PG_EXISTS_ERROR = -24,
  CLOUDMESSAGE__VMRESULT_TYPE__VM_RESULT_PG_NOT_FOUND = -25
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__VMRESULT_TYPE)
} Cloudmessage__VMResultType;
typedef enum _Cloudmessage__Result {
  CLOUDMESSAGE__RESULT__SUCCESS = 0,
  CLOUDMESSAGE__RESULT__FAIL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__RESULT)
} Cloudmessage__Result;
typedef enum _Cloudmessage__VMStates {
  CLOUDMESSAGE__VMSTATES__VM_STATS_ON = 1,
  CLOUDMESSAGE__VMSTATES__VM_STATS_OFF = 2,
  CLOUDMESSAGE__VMSTATES__VM_STATS_SUSPEND = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__VMSTATES)
} Cloudmessage__VMStates;
/*
 * start vm ops 
 */
typedef enum _Cloudmessage__VMOps {
  CLOUDMESSAGE__VMOPS__LC_VM_START = 1,
  CLOUDMESSAGE__VMOPS__LC_VM_SHUTDOWN = 2,
  CLOUDMESSAGE__VMOPS__LC_VM_PAUSE = 3,
  CLOUDMESSAGE__VMOPS__LC_VM_RESUME = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__VMOPS)
} Cloudmessage__VMOps;
/*
 * start vm update 
 */
typedef enum _Cloudmessage__VMUpdateFlag {
  CLOUDMESSAGE__VMUPDATE_FLAG__LC_VMWARE_UPDATE_SYS_DISK = 1,
  CLOUDMESSAGE__VMUPDATE_FLAG__LC_VMWARE_UPDATE_USER_DISK = 2,
  CLOUDMESSAGE__VMUPDATE_FLAG__LC_VMWARE_UPDATE_INTF = 4,
  CLOUDMESSAGE__VMUPDATE_FLAG__LC_VMWARE_UPDATE_CPU_NUM = 8,
  CLOUDMESSAGE__VMUPDATE_FLAG__LC_VMWARE_UPDATE_MEMORY_SIZE = 16,
  CLOUDMESSAGE__VMUPDATE_FLAG__LC_VMWARE_UPDATE_HA_DISK = 32
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__VMUPDATE_FLAG)
} Cloudmessage__VMUpdateFlag;
/*
 * start vm attach detach volume 
 */
typedef enum _Cloudmessage__VMSetDiskFlag {
  CLOUDMESSAGE__VMSET_DISK_FLAG__LC_VMWARE_ATTACH_DISK = 1,
  CLOUDMESSAGE__VMSET_DISK_FLAG__LC_VMWARE_DETACH_DISK = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOUDMESSAGE__VMSET_DISK_FLAG)
} Cloudmessage__VMSetDiskFlag;

/* --- messages --- */

struct  _Cloudmessage__VMVCenterInfoResp
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_vm_info;
  Cloudmessage__VMVCenterInfo **vm_info;
};
#define CLOUDMESSAGE__VMVCENTER_INFO_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmvcenter_info_resp__descriptor) \
    , 0, 0,NULL }


struct  _Cloudmessage__VMVCenterInfo
{
  ProtobufCMessage base;
  uint32_t result;
  char *vm_name;
  char *server_ip;
  char *server_vcenter_ip;
};
#define CLOUDMESSAGE__VMVCENTER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmvcenter_info__descriptor) \
    , 0, NULL, NULL, NULL }


struct  _Cloudmessage__Message
{
  ProtobufCMessage base;
  Cloudmessage__VMAddReq *vm_add_request;
  Cloudmessage__VMAddResp *vm_add_response;
  Cloudmessage__VMDeleteReq *vm_del_request;
  Cloudmessage__VMDeleteResp *vm_del_response;
  Cloudmessage__VMOpsReq *vm_ops_request;
  /*
   * vmdriver 
   */
  Cloudmessage__VMOpsResp *vm_ops_response;
  /*
   * monitor 
   */
  Cloudmessage__VMStatsReq *vm_stats_request;
  Cloudmessage__VMStatsResp *vm_stats_response;
  /*
   * vmdriver 
   */
  Cloudmessage__VMUpdateReq *vm_update_request;
  Cloudmessage__VMUpdateResp *vm_update_response;
  /*
   * lcpd 
   */
  Cloudmessage__PortUpdateReq *port_update_request;
  Cloudmessage__PortUpdateResp *port_update_response;
  /*
   * vmdriver,monitor 
   */
  Cloudmessage__HostsInfoReq *host_info_request;
  Cloudmessage__HostsInfoResp *host_info_response;
  /*
   * vmdriver 
   */
  Cloudmessage__VMSnapshotAddReq *vm_snapshot_add_request;
  Cloudmessage__VMSnapshotAddResp *vm_snapshot_add_response;
  Cloudmessage__VMSnapshotDelReq *vm_snapshot_del_request;
  Cloudmessage__VMSnapshotDelResp *vm_snapshot_del_response;
  Cloudmessage__VMSnapshotRevertReq *vm_snapshot_revert_request;
  Cloudmessage__VMSnapshotRevertResp *vm_snapshot_revert_response;
  /*
   * vmdriver 
   */
  Cloudmessage__VMMigrateReq *vm_migrate_request;
  Cloudmessage__VMMigrateResp *vm_migrate_response;
  /*
   * snf 
   */
  Cloudmessage__VMVifUsageReq *vm_vif_usage_request;
  Cloudmessage__VMVifUsageResp *vm_vif_usage_response;
  Cloudmessage__VMSetDiskReq *vm_disk_request;
  Cloudmessage__VMSetDiskResp *vm_disk_response;
  Cloudmessage__PGDeleteReq *port_group_del_request;
  Cloudmessage__PGDeleteResp *port_group_del_response;
  /*
   *  optional VmadapterVmLearnReq vm_learning_request = 30;
   */
  Cloudmessage__VMVCenterInfoResp *vm_ha_response;
  /*
   *  optional VmadapterVmLearnReply vm_learning_response = 31;
   */
  Cloudmessage__VmadapterVmLearnReq *vmadapter_vm_learn_req;
  Cloudmessage__VmadapterVmLearnReply *vmadapter_vm_learn_reply;
};
#define CLOUDMESSAGE__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__message__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * VM launch info 
 */
struct  _Cloudmessage__LaunchInfo
{
  ProtobufCMessage base;
  /*
   * server ip address 
   */
  char *serverip;
  /*
   * server access username 
   */
  char *username;
  /*
   * server access password 
   */
  char *password;
};
#define CLOUDMESSAGE__LAUNCH_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__launch_info__descriptor) \
    , NULL, NULL, NULL }


struct  _Cloudmessage__IntfInfo
{
  ProtobufCMessage base;
  char *mac;
  char *v4addr;
  char *gwaddr;
  char *mask;
  char *portgroup_name;
  /*
   * if index for this VM 
   */
  uint32_t if_index;
  /*
   * Bitwise-OR of Flags 
   */
  Cloudmessage__IntfInfo__IntfFlag flag;
  uint64_t bandwidth;
  protobuf_c_boolean has_vlan_id;
  uint32_t vlan_id;
  uint32_t vif_id;
};
#define CLOUDMESSAGE__INTF_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__intf_info__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0, 0, 0, 0,0, 0 }


struct  _Cloudmessage__VMAddReq
{
  ProtobufCMessage base;
  /*
   * vm name 
   */
  char *vm_name;
  /*
   * vm's template name 
   */
  char *vm_template;
  /*
   * vm's cpu number 
   */
  uint32_t vm_cpunum;
  /*
   * vm's memory with MB unit 
   */
  uint32_t vm_memory;
  char *vm_sys_disk_ds_name;
  /*
   * system disk in GBytes 
   */
  uint32_t vm_sys_disk_size;
  char *vm_user_disk_ds_name;
  /*
   * user disk in GBytes 
   */
  uint32_t vm_user_disk_size;
  uint32_t os_type;
  size_t n_intf;
  Cloudmessage__IntfInfo **intf;
  Cloudmessage__LaunchInfo *launch_info;
  uint32_t vnc_port;
  /*
   * iso file path 
   */
  char *iso_path;
};
#define CLOUDMESSAGE__VMADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmadd_req__descriptor) \
    , NULL, NULL, 0, 0, NULL, 0, NULL, 0, 0, 0,NULL, NULL, 0, NULL }


struct  _Cloudmessage__VMAddResp
{
  ProtobufCMessage base;
  uint32_t result;
  char *vm_name;
  size_t n_intf;
  Cloudmessage__IntfInfo **intf;
};
#define CLOUDMESSAGE__VMADD_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmadd_resp__descriptor) \
    , 0, NULL, 0,NULL }


/*
 * start vm del 
 */
struct  _Cloudmessage__VMDeleteReq
{
  ProtobufCMessage base;
  char *vm_name;
};
#define CLOUDMESSAGE__VMDELETE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmdelete_req__descriptor) \
    , NULL }


struct  _Cloudmessage__VMDeleteResp
{
  ProtobufCMessage base;
  char *vm_name;
  /*
   * following fields returned by vcenterd 
   */
  uint32_t result;
};
#define CLOUDMESSAGE__VMDELETE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmdelete_resp__descriptor) \
    , NULL, 0 }


struct  _Cloudmessage__VMOpsReq
{
  ProtobufCMessage base;
  char *vm_name;
  /*
   * operations 
   */
  Cloudmessage__VMOps ops;
  /*
   * iso file path 
   */
  char *iso_path;
};
#define CLOUDMESSAGE__VMOPS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmops_req__descriptor) \
    , NULL, 0, NULL }


struct  _Cloudmessage__VMOpsResp
{
  ProtobufCMessage base;
  char *vm_name;
  /*
   * operations 
   */
  Cloudmessage__VMOps ops;
  /*
   * following fields returned by vcenterd 
   */
  uint32_t result;
};
#define CLOUDMESSAGE__VMOPS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmops_resp__descriptor) \
    , NULL, 0, 0 }


struct  _Cloudmessage__VMStats
{
  ProtobufCMessage base;
  /*
   * vm name used by livecloud 
   */
  char *vm_name;
  /*
   * following fields returned by vcenterd 
   */
  uint32_t result;
  /*
   * vm state such as power state 
   */
  Cloudmessage__VMStates vm_state;
  /*
   * memory total size , in MBytes unit
   */
  uint32_t mem_used;
  /*
   * CPU usage 0 ~1 
   */
  char *cpu_usage;
  /*
   * system disk used GBytes 
   */
  uint32_t sys_disk_used;
  /*
   * user disk used 
   */
  uint32_t user_disk_used;
  char *host_address;
};
#define CLOUDMESSAGE__VMSTATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmstats__descriptor) \
    , NULL, 0, 0, 0, NULL, 0, 0, NULL }


/*
 * VM/Gateway update both use this message 
 */
struct  _Cloudmessage__VMStatsReq
{
  ProtobufCMessage base;
  /*
   * vm name 
   */
  size_t n_vm_name;
  char **vm_name;
};
#define CLOUDMESSAGE__VMSTATS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmstats_req__descriptor) \
    , 0,NULL }


struct  _Cloudmessage__VMStatsResp
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_vm_stats;
  Cloudmessage__VMStats **vm_stats;
};
#define CLOUDMESSAGE__VMSTATS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmstats_resp__descriptor) \
    , 0, 0,NULL }


struct  _Cloudmessage__VMHAdisk
{
  ProtobufCMessage base;
  /*
   * vm ha disk 
   */
  uint32_t userdevice;
  /*
   * vm ha disk in GBytes 
   */
  uint32_t disk_size;
  /*
   * vm ha disk uuid 
   */
  char *disk_uuid;
  /*
   * vm ha disk name 
   */
  char *disk_name;
  char *disk_ds_name;
};
#define CLOUDMESSAGE__VMHADISK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmhadisk__descriptor) \
    , 0, 0, NULL, NULL, NULL }


struct  _Cloudmessage__VMUpdateReq
{
  ProtobufCMessage base;
  /*
   * vm's  name
   */
  char *vm_name;
  /*
   *Bitwise-OR of Flags 
   */
  uint32_t flag;
  char *vm_sys_disk_ds_name;
  /*
   * system disk in GBytes 
   */
  protobuf_c_boolean has_vm_sys_disk_size;
  uint32_t vm_sys_disk_size;
  char *vm_user_disk_ds_name;
  /*
   * user disk in GBytes 
   */
  protobuf_c_boolean has_vm_user_disk_size;
  uint32_t vm_user_disk_size;
  size_t n_intf;
  Cloudmessage__IntfInfo **intf;
  protobuf_c_boolean has_vm_cpu_num;
  uint32_t vm_cpu_num;
  /*
   * memory size in MBytes 
   */
  protobuf_c_boolean has_vm_memory_size;
  uint32_t vm_memory_size;
  size_t n_ha_disk;
  Cloudmessage__VMHAdisk **ha_disk;
};
#define CLOUDMESSAGE__VMUPDATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmupdate_req__descriptor) \
    , NULL, 0, NULL, 0,0, NULL, 0,0, 0,NULL, 0,0, 0,0, 0,NULL }


struct  _Cloudmessage__VMUpdateResp
{
  ProtobufCMessage base;
  /*
   * vm name used by livecloud 
   */
  char *vm_name;
  /*
   * fields returned by vcenterd 
   */
  uint32_t result;
  /*
   *Bitwise-OR of Flags 
   */
  uint32_t flag;
  char *vm_sys_disk_ds_name;
  /*
   * system disk in GBytes 
   */
  protobuf_c_boolean has_vm_sys_disk_size;
  uint32_t vm_sys_disk_size;
  char *vm_user_disk_ds_name;
  /*
   * user disk in GBytes 
   */
  protobuf_c_boolean has_vm_user_disk_size;
  uint32_t vm_user_disk_size;
  size_t n_intf;
  Cloudmessage__IntfInfo **intf;
  protobuf_c_boolean has_vm_cpu_num;
  uint32_t vm_cpu_num;
  /*
   * memory size in MBytes 
   */
  protobuf_c_boolean has_vm_memory_size;
  uint32_t vm_memory_size;
  size_t n_ha_disk;
  Cloudmessage__VMHAdisk **ha_disk;
};
#define CLOUDMESSAGE__VMUPDATE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmupdate_resp__descriptor) \
    , NULL, 0, 0, NULL, 0,0, NULL, 0,0, 0,NULL, 0,0, 0,0, 0,NULL }


/*
 * start update port 
 */
struct  _Cloudmessage__PortUpdateReq
{
  ProtobufCMessage base;
  char *vm_name;
  uint32_t actions;
  size_t n_intf;
  Cloudmessage__IntfInfo **intf;
};
#define CLOUDMESSAGE__PORT_UPDATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__port_update_req__descriptor) \
    , NULL, 0, 0,NULL }


struct  _Cloudmessage__PortUpdateResp
{
  ProtobufCMessage base;
  char *vm_name;
  uint32_t actions;
  size_t n_intf;
  Cloudmessage__IntfInfo **intf;
  uint32_t result;
};
#define CLOUDMESSAGE__PORT_UPDATE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__port_update_resp__descriptor) \
    , NULL, 0, 0,NULL, 0 }


/*
 * start host info 
 */
struct  _Cloudmessage__StorageInfo
{
  ProtobufCMessage base;
  /*
   * datastore name 
   */
  char *ds_name;
  uint32_t disk_free;
  uint32_t disk_total;
  Cloudmessage__StorageInfo__StorageType storage_type;
  char *uuid;
};
#define CLOUDMESSAGE__STORAGE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__storage_info__descriptor) \
    , NULL, 0, 0, 0, NULL }


/*
 * Host Info 
 */
struct  _Cloudmessage__HostsInfoReq
{
  ProtobufCMessage base;
  char *host_address;
};
#define CLOUDMESSAGE__HOSTS_INFO_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__hosts_info_req__descriptor) \
    , NULL }


struct  _Cloudmessage__HostsInfoResp
{
  ProtobufCMessage base;
  char *host_address;
  uint32_t result;
  Cloudmessage__HostsInfoResp__HostStatus status;
  /*
   * "0,0.042#1,0.034#2,0.315#" <id>,<usage># 
   */
  char *cpu_usage;
  uint32_t cpu_num;
  /*
   * "<cores>,<vendor>,<model>" 
   */
  char *cpu_info;
  /*
   * in MB 
   */
  uint32_t mem_used;
  /*
   * in MB 
   */
  uint32_t mem_total;
  size_t n_storage_info;
  Cloudmessage__StorageInfo **storage_info;
  uint32_t role;
  char *host_name;
};
#define CLOUDMESSAGE__HOSTS_INFO_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__hosts_info_resp__descriptor) \
    , NULL, 0, 0, NULL, 0, NULL, 0, 0, 0,NULL, 0, NULL }


/*
 * start vm snapshot add 
 */
struct  _Cloudmessage__VMSnapshotAddReq
{
  ProtobufCMessage base;
  char *vm_name;
  char *vm_snapshot_name;
  Cloudmessage__VMSnapshotAddReq__VMSnapshotAddFlag flag;
};
#define CLOUDMESSAGE__VMSNAPSHOT_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmsnapshot_add_req__descriptor) \
    , NULL, NULL, 0 }


struct  _Cloudmessage__VMSnapshotAddResp
{
  ProtobufCMessage base;
  uint32_t result;
  char *vm_name;
  char *vm_snapshot_name;
};
#define CLOUDMESSAGE__VMSNAPSHOT_ADD_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmsnapshot_add_resp__descriptor) \
    , 0, NULL, NULL }


/*
 * start vm snapshot del 
 */
struct  _Cloudmessage__VMSnapshotDelReq
{
  ProtobufCMessage base;
  char *vm_name;
  char *vm_snapshot_name;
};
#define CLOUDMESSAGE__VMSNAPSHOT_DEL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmsnapshot_del_req__descriptor) \
    , NULL, NULL }


struct  _Cloudmessage__VMSnapshotDelResp
{
  ProtobufCMessage base;
  uint32_t result;
  char *vm_name;
  char *vm_snapshot_name;
};
#define CLOUDMESSAGE__VMSNAPSHOT_DEL_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmsnapshot_del_resp__descriptor) \
    , 0, NULL, NULL }


/*
 * start vm snapshot revert 
 */
struct  _Cloudmessage__VMSnapshotRevertReq
{
  ProtobufCMessage base;
  char *vm_name;
  char *vm_snapshot_name;
};
#define CLOUDMESSAGE__VMSNAPSHOT_REVERT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmsnapshot_revert_req__descriptor) \
    , NULL, NULL }


struct  _Cloudmessage__VMSnapshotRevertResp
{
  ProtobufCMessage base;
  uint32_t result;
  char *vm_name;
  char *vm_snapshot_name;
};
#define CLOUDMESSAGE__VMSNAPSHOT_REVERT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmsnapshot_revert_resp__descriptor) \
    , 0, NULL, NULL }


/*
 * start vm migrate 
 */
struct  _Cloudmessage__VMMigrateReq
{
  ProtobufCMessage base;
  char *vm_name;
  char *dest_host_addr;
  char *dest_ds_name;
};
#define CLOUDMESSAGE__VMMIGRATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmmigrate_req__descriptor) \
    , NULL, NULL, NULL }


struct  _Cloudmessage__VMMigrateResp
{
  ProtobufCMessage base;
  uint32_t result;
  char *vm_name;
  char *dest_host_addr;
  char *dest_ds_name;
};
#define CLOUDMESSAGE__VMMIGRATE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmmigrate_resp__descriptor) \
    , 0, NULL, NULL, NULL }


/*
 * start vm vif usage 
 */
struct  _Cloudmessage__VifUsage
{
  ProtobufCMessage base;
  uint32_t if_index;
  /*
   * received bytes
   */
  uint64_t rx_bytes;
  uint64_t rx_dropped;
  uint64_t rx_errors;
  /*
   * packets number 
   */
  uint64_t rx_packets;
  /*
   * bytes per second 
   */
  uint64_t rx_bps;
  /*
   * packets per second 
   */
  uint64_t rx_pps;
  /*
   * transmit bytes
   */
  uint64_t tx_bytes;
  uint64_t tx_errors;
  uint64_t tx_dropped;
  uint64_t tx_packets;
  uint64_t tx_bps;
  uint64_t tx_pps;
  uint32_t vif_id;
};
#define CLOUDMESSAGE__VIF_USAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vif_usage__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Cloudmessage__VMVifUsage
{
  ProtobufCMessage base;
  /*
   * following fields returned by vcenterd 
   */
  uint32_t result;
  /*
   * vm name used by livecloud 
   */
  char *vm_name;
  uint32_t vm_type;
  uint32_t vm_id;
  uint32_t vdc_id;
  uint32_t host_id;
  /*
   * vm state such as power state 
   */
  Cloudmessage__VMStates vm_state;
  /*
   * memory free size , in MBytes unit
   */
  uint32_t mem_free;
  /*
   * CPU usage 0 ~1 
   */
  char *cpu_usage;
  /*
   * system disk used GBytes 
   */
  uint32_t sys_disk_used;
  /*
   * user disk used 
   */
  uint32_t user_disk_used;
  size_t n_vif_usage;
  Cloudmessage__VifUsage **vif_usage;
};
#define CLOUDMESSAGE__VMVIF_USAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmvif_usage__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0,NULL }


struct  _Cloudmessage__VMIntfInfo
{
  ProtobufCMessage base;
  char *vm_name;
  Cloudmessage__IntfInfo *vm_intf;
  uint32_t vm_type;
  uint32_t vm_id;
  uint32_t vdc_id;
  uint32_t host_id;
};
#define CLOUDMESSAGE__VMINTF_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmintf_info__descriptor) \
    , NULL, NULL, 0, 0, 0, 0 }


struct  _Cloudmessage__VMVifUsageReq
{
  ProtobufCMessage base;
  size_t n_vm_intf_info;
  Cloudmessage__VMIntfInfo **vm_intf_info;
};
#define CLOUDMESSAGE__VMVIF_USAGE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmvif_usage_req__descriptor) \
    , 0,NULL }


struct  _Cloudmessage__VMVifUsageResp
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_vm_vif_usage;
  Cloudmessage__VMVifUsage **vm_vif_usage;
};
#define CLOUDMESSAGE__VMVIF_USAGE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmvif_usage_resp__descriptor) \
    , 0, 0,NULL }


struct  _Cloudmessage__VMSetDiskReq
{
  ProtobufCMessage base;
  /*
   * vm's  name
   */
  char *vm_name;
  /*
   *Bitwise-OR of Flags 
   */
  uint32_t flag;
  size_t n_ha_disk;
  Cloudmessage__VMHAdisk **ha_disk;
};
#define CLOUDMESSAGE__VMSET_DISK_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmset_disk_req__descriptor) \
    , NULL, 0, 0,NULL }


struct  _Cloudmessage__VMSetDiskResp
{
  ProtobufCMessage base;
  /*
   * vm name used by livecloud 
   */
  char *vm_name;
  /*
   * fields returned by vcenterd 
   */
  uint32_t result;
  /*
   *Bitwise-OR of Flags 
   */
  uint32_t flag;
};
#define CLOUDMESSAGE__VMSET_DISK_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmset_disk_resp__descriptor) \
    , NULL, 0, 0 }


/*
 * start delete a port group 
 */
struct  _Cloudmessage__PGDeleteReq
{
  ProtobufCMessage base;
  char *portgroup_name;
};
#define CLOUDMESSAGE__PGDELETE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__pgdelete_req__descriptor) \
    , NULL }


struct  _Cloudmessage__PGDeleteResp
{
  ProtobufCMessage base;
  uint32_t result;
  char *portgroup_name;
};
#define CLOUDMESSAGE__PGDELETE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__pgdelete_resp__descriptor) \
    , 0, NULL }


struct  _Cloudmessage__VmadapterVmLearnReq
{
  ProtobufCMessage base;
  uint32_t vc_id;
  char *vcenter_ip;
  char *vc_username;
  char *vc_password;
};
#define CLOUDMESSAGE__VMADAPTER_VM_LEARN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmadapter_vm_learn_req__descriptor) \
    , 0, NULL, NULL, NULL }


struct  _Cloudmessage__VmadapterVmLearnReply
{
  ProtobufCMessage base;
  char *vcenter_ip;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Cloudmessage__Result result;
  char *vm_info;
};
#define CLOUDMESSAGE__VMADAPTER_VM_LEARN_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cloudmessage__vmadapter_vm_learn_reply__descriptor) \
    , NULL, 0,0, 0,0, NULL }


/* Cloudmessage__VMVCenterInfoResp methods */
void   cloudmessage__vmvcenter_info_resp__init
                     (Cloudmessage__VMVCenterInfoResp         *message);
size_t cloudmessage__vmvcenter_info_resp__get_packed_size
                     (const Cloudmessage__VMVCenterInfoResp   *message);
size_t cloudmessage__vmvcenter_info_resp__pack
                     (const Cloudmessage__VMVCenterInfoResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmvcenter_info_resp__pack_to_buffer
                     (const Cloudmessage__VMVCenterInfoResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMVCenterInfoResp *
       cloudmessage__vmvcenter_info_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmvcenter_info_resp__free_unpacked
                     (Cloudmessage__VMVCenterInfoResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMVCenterInfo methods */
void   cloudmessage__vmvcenter_info__init
                     (Cloudmessage__VMVCenterInfo         *message);
size_t cloudmessage__vmvcenter_info__get_packed_size
                     (const Cloudmessage__VMVCenterInfo   *message);
size_t cloudmessage__vmvcenter_info__pack
                     (const Cloudmessage__VMVCenterInfo   *message,
                      uint8_t             *out);
size_t cloudmessage__vmvcenter_info__pack_to_buffer
                     (const Cloudmessage__VMVCenterInfo   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMVCenterInfo *
       cloudmessage__vmvcenter_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmvcenter_info__free_unpacked
                     (Cloudmessage__VMVCenterInfo *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__Message methods */
void   cloudmessage__message__init
                     (Cloudmessage__Message         *message);
size_t cloudmessage__message__get_packed_size
                     (const Cloudmessage__Message   *message);
size_t cloudmessage__message__pack
                     (const Cloudmessage__Message   *message,
                      uint8_t             *out);
size_t cloudmessage__message__pack_to_buffer
                     (const Cloudmessage__Message   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__Message *
       cloudmessage__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__message__free_unpacked
                     (Cloudmessage__Message *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__LaunchInfo methods */
void   cloudmessage__launch_info__init
                     (Cloudmessage__LaunchInfo         *message);
size_t cloudmessage__launch_info__get_packed_size
                     (const Cloudmessage__LaunchInfo   *message);
size_t cloudmessage__launch_info__pack
                     (const Cloudmessage__LaunchInfo   *message,
                      uint8_t             *out);
size_t cloudmessage__launch_info__pack_to_buffer
                     (const Cloudmessage__LaunchInfo   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__LaunchInfo *
       cloudmessage__launch_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__launch_info__free_unpacked
                     (Cloudmessage__LaunchInfo *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__IntfInfo methods */
void   cloudmessage__intf_info__init
                     (Cloudmessage__IntfInfo         *message);
size_t cloudmessage__intf_info__get_packed_size
                     (const Cloudmessage__IntfInfo   *message);
size_t cloudmessage__intf_info__pack
                     (const Cloudmessage__IntfInfo   *message,
                      uint8_t             *out);
size_t cloudmessage__intf_info__pack_to_buffer
                     (const Cloudmessage__IntfInfo   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__IntfInfo *
       cloudmessage__intf_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__intf_info__free_unpacked
                     (Cloudmessage__IntfInfo *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMAddReq methods */
void   cloudmessage__vmadd_req__init
                     (Cloudmessage__VMAddReq         *message);
size_t cloudmessage__vmadd_req__get_packed_size
                     (const Cloudmessage__VMAddReq   *message);
size_t cloudmessage__vmadd_req__pack
                     (const Cloudmessage__VMAddReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmadd_req__pack_to_buffer
                     (const Cloudmessage__VMAddReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMAddReq *
       cloudmessage__vmadd_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmadd_req__free_unpacked
                     (Cloudmessage__VMAddReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMAddResp methods */
void   cloudmessage__vmadd_resp__init
                     (Cloudmessage__VMAddResp         *message);
size_t cloudmessage__vmadd_resp__get_packed_size
                     (const Cloudmessage__VMAddResp   *message);
size_t cloudmessage__vmadd_resp__pack
                     (const Cloudmessage__VMAddResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmadd_resp__pack_to_buffer
                     (const Cloudmessage__VMAddResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMAddResp *
       cloudmessage__vmadd_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmadd_resp__free_unpacked
                     (Cloudmessage__VMAddResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMDeleteReq methods */
void   cloudmessage__vmdelete_req__init
                     (Cloudmessage__VMDeleteReq         *message);
size_t cloudmessage__vmdelete_req__get_packed_size
                     (const Cloudmessage__VMDeleteReq   *message);
size_t cloudmessage__vmdelete_req__pack
                     (const Cloudmessage__VMDeleteReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmdelete_req__pack_to_buffer
                     (const Cloudmessage__VMDeleteReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMDeleteReq *
       cloudmessage__vmdelete_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmdelete_req__free_unpacked
                     (Cloudmessage__VMDeleteReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMDeleteResp methods */
void   cloudmessage__vmdelete_resp__init
                     (Cloudmessage__VMDeleteResp         *message);
size_t cloudmessage__vmdelete_resp__get_packed_size
                     (const Cloudmessage__VMDeleteResp   *message);
size_t cloudmessage__vmdelete_resp__pack
                     (const Cloudmessage__VMDeleteResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmdelete_resp__pack_to_buffer
                     (const Cloudmessage__VMDeleteResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMDeleteResp *
       cloudmessage__vmdelete_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmdelete_resp__free_unpacked
                     (Cloudmessage__VMDeleteResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMOpsReq methods */
void   cloudmessage__vmops_req__init
                     (Cloudmessage__VMOpsReq         *message);
size_t cloudmessage__vmops_req__get_packed_size
                     (const Cloudmessage__VMOpsReq   *message);
size_t cloudmessage__vmops_req__pack
                     (const Cloudmessage__VMOpsReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmops_req__pack_to_buffer
                     (const Cloudmessage__VMOpsReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMOpsReq *
       cloudmessage__vmops_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmops_req__free_unpacked
                     (Cloudmessage__VMOpsReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMOpsResp methods */
void   cloudmessage__vmops_resp__init
                     (Cloudmessage__VMOpsResp         *message);
size_t cloudmessage__vmops_resp__get_packed_size
                     (const Cloudmessage__VMOpsResp   *message);
size_t cloudmessage__vmops_resp__pack
                     (const Cloudmessage__VMOpsResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmops_resp__pack_to_buffer
                     (const Cloudmessage__VMOpsResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMOpsResp *
       cloudmessage__vmops_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmops_resp__free_unpacked
                     (Cloudmessage__VMOpsResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMStats methods */
void   cloudmessage__vmstats__init
                     (Cloudmessage__VMStats         *message);
size_t cloudmessage__vmstats__get_packed_size
                     (const Cloudmessage__VMStats   *message);
size_t cloudmessage__vmstats__pack
                     (const Cloudmessage__VMStats   *message,
                      uint8_t             *out);
size_t cloudmessage__vmstats__pack_to_buffer
                     (const Cloudmessage__VMStats   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMStats *
       cloudmessage__vmstats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmstats__free_unpacked
                     (Cloudmessage__VMStats *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMStatsReq methods */
void   cloudmessage__vmstats_req__init
                     (Cloudmessage__VMStatsReq         *message);
size_t cloudmessage__vmstats_req__get_packed_size
                     (const Cloudmessage__VMStatsReq   *message);
size_t cloudmessage__vmstats_req__pack
                     (const Cloudmessage__VMStatsReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmstats_req__pack_to_buffer
                     (const Cloudmessage__VMStatsReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMStatsReq *
       cloudmessage__vmstats_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmstats_req__free_unpacked
                     (Cloudmessage__VMStatsReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMStatsResp methods */
void   cloudmessage__vmstats_resp__init
                     (Cloudmessage__VMStatsResp         *message);
size_t cloudmessage__vmstats_resp__get_packed_size
                     (const Cloudmessage__VMStatsResp   *message);
size_t cloudmessage__vmstats_resp__pack
                     (const Cloudmessage__VMStatsResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmstats_resp__pack_to_buffer
                     (const Cloudmessage__VMStatsResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMStatsResp *
       cloudmessage__vmstats_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmstats_resp__free_unpacked
                     (Cloudmessage__VMStatsResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMHAdisk methods */
void   cloudmessage__vmhadisk__init
                     (Cloudmessage__VMHAdisk         *message);
size_t cloudmessage__vmhadisk__get_packed_size
                     (const Cloudmessage__VMHAdisk   *message);
size_t cloudmessage__vmhadisk__pack
                     (const Cloudmessage__VMHAdisk   *message,
                      uint8_t             *out);
size_t cloudmessage__vmhadisk__pack_to_buffer
                     (const Cloudmessage__VMHAdisk   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMHAdisk *
       cloudmessage__vmhadisk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmhadisk__free_unpacked
                     (Cloudmessage__VMHAdisk *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMUpdateReq methods */
void   cloudmessage__vmupdate_req__init
                     (Cloudmessage__VMUpdateReq         *message);
size_t cloudmessage__vmupdate_req__get_packed_size
                     (const Cloudmessage__VMUpdateReq   *message);
size_t cloudmessage__vmupdate_req__pack
                     (const Cloudmessage__VMUpdateReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmupdate_req__pack_to_buffer
                     (const Cloudmessage__VMUpdateReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMUpdateReq *
       cloudmessage__vmupdate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmupdate_req__free_unpacked
                     (Cloudmessage__VMUpdateReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMUpdateResp methods */
void   cloudmessage__vmupdate_resp__init
                     (Cloudmessage__VMUpdateResp         *message);
size_t cloudmessage__vmupdate_resp__get_packed_size
                     (const Cloudmessage__VMUpdateResp   *message);
size_t cloudmessage__vmupdate_resp__pack
                     (const Cloudmessage__VMUpdateResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmupdate_resp__pack_to_buffer
                     (const Cloudmessage__VMUpdateResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMUpdateResp *
       cloudmessage__vmupdate_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmupdate_resp__free_unpacked
                     (Cloudmessage__VMUpdateResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__PortUpdateReq methods */
void   cloudmessage__port_update_req__init
                     (Cloudmessage__PortUpdateReq         *message);
size_t cloudmessage__port_update_req__get_packed_size
                     (const Cloudmessage__PortUpdateReq   *message);
size_t cloudmessage__port_update_req__pack
                     (const Cloudmessage__PortUpdateReq   *message,
                      uint8_t             *out);
size_t cloudmessage__port_update_req__pack_to_buffer
                     (const Cloudmessage__PortUpdateReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__PortUpdateReq *
       cloudmessage__port_update_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__port_update_req__free_unpacked
                     (Cloudmessage__PortUpdateReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__PortUpdateResp methods */
void   cloudmessage__port_update_resp__init
                     (Cloudmessage__PortUpdateResp         *message);
size_t cloudmessage__port_update_resp__get_packed_size
                     (const Cloudmessage__PortUpdateResp   *message);
size_t cloudmessage__port_update_resp__pack
                     (const Cloudmessage__PortUpdateResp   *message,
                      uint8_t             *out);
size_t cloudmessage__port_update_resp__pack_to_buffer
                     (const Cloudmessage__PortUpdateResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__PortUpdateResp *
       cloudmessage__port_update_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__port_update_resp__free_unpacked
                     (Cloudmessage__PortUpdateResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__StorageInfo methods */
void   cloudmessage__storage_info__init
                     (Cloudmessage__StorageInfo         *message);
size_t cloudmessage__storage_info__get_packed_size
                     (const Cloudmessage__StorageInfo   *message);
size_t cloudmessage__storage_info__pack
                     (const Cloudmessage__StorageInfo   *message,
                      uint8_t             *out);
size_t cloudmessage__storage_info__pack_to_buffer
                     (const Cloudmessage__StorageInfo   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__StorageInfo *
       cloudmessage__storage_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__storage_info__free_unpacked
                     (Cloudmessage__StorageInfo *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__HostsInfoReq methods */
void   cloudmessage__hosts_info_req__init
                     (Cloudmessage__HostsInfoReq         *message);
size_t cloudmessage__hosts_info_req__get_packed_size
                     (const Cloudmessage__HostsInfoReq   *message);
size_t cloudmessage__hosts_info_req__pack
                     (const Cloudmessage__HostsInfoReq   *message,
                      uint8_t             *out);
size_t cloudmessage__hosts_info_req__pack_to_buffer
                     (const Cloudmessage__HostsInfoReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__HostsInfoReq *
       cloudmessage__hosts_info_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__hosts_info_req__free_unpacked
                     (Cloudmessage__HostsInfoReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__HostsInfoResp methods */
void   cloudmessage__hosts_info_resp__init
                     (Cloudmessage__HostsInfoResp         *message);
size_t cloudmessage__hosts_info_resp__get_packed_size
                     (const Cloudmessage__HostsInfoResp   *message);
size_t cloudmessage__hosts_info_resp__pack
                     (const Cloudmessage__HostsInfoResp   *message,
                      uint8_t             *out);
size_t cloudmessage__hosts_info_resp__pack_to_buffer
                     (const Cloudmessage__HostsInfoResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__HostsInfoResp *
       cloudmessage__hosts_info_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__hosts_info_resp__free_unpacked
                     (Cloudmessage__HostsInfoResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSnapshotAddReq methods */
void   cloudmessage__vmsnapshot_add_req__init
                     (Cloudmessage__VMSnapshotAddReq         *message);
size_t cloudmessage__vmsnapshot_add_req__get_packed_size
                     (const Cloudmessage__VMSnapshotAddReq   *message);
size_t cloudmessage__vmsnapshot_add_req__pack
                     (const Cloudmessage__VMSnapshotAddReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmsnapshot_add_req__pack_to_buffer
                     (const Cloudmessage__VMSnapshotAddReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSnapshotAddReq *
       cloudmessage__vmsnapshot_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmsnapshot_add_req__free_unpacked
                     (Cloudmessage__VMSnapshotAddReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSnapshotAddResp methods */
void   cloudmessage__vmsnapshot_add_resp__init
                     (Cloudmessage__VMSnapshotAddResp         *message);
size_t cloudmessage__vmsnapshot_add_resp__get_packed_size
                     (const Cloudmessage__VMSnapshotAddResp   *message);
size_t cloudmessage__vmsnapshot_add_resp__pack
                     (const Cloudmessage__VMSnapshotAddResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmsnapshot_add_resp__pack_to_buffer
                     (const Cloudmessage__VMSnapshotAddResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSnapshotAddResp *
       cloudmessage__vmsnapshot_add_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmsnapshot_add_resp__free_unpacked
                     (Cloudmessage__VMSnapshotAddResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSnapshotDelReq methods */
void   cloudmessage__vmsnapshot_del_req__init
                     (Cloudmessage__VMSnapshotDelReq         *message);
size_t cloudmessage__vmsnapshot_del_req__get_packed_size
                     (const Cloudmessage__VMSnapshotDelReq   *message);
size_t cloudmessage__vmsnapshot_del_req__pack
                     (const Cloudmessage__VMSnapshotDelReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmsnapshot_del_req__pack_to_buffer
                     (const Cloudmessage__VMSnapshotDelReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSnapshotDelReq *
       cloudmessage__vmsnapshot_del_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmsnapshot_del_req__free_unpacked
                     (Cloudmessage__VMSnapshotDelReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSnapshotDelResp methods */
void   cloudmessage__vmsnapshot_del_resp__init
                     (Cloudmessage__VMSnapshotDelResp         *message);
size_t cloudmessage__vmsnapshot_del_resp__get_packed_size
                     (const Cloudmessage__VMSnapshotDelResp   *message);
size_t cloudmessage__vmsnapshot_del_resp__pack
                     (const Cloudmessage__VMSnapshotDelResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmsnapshot_del_resp__pack_to_buffer
                     (const Cloudmessage__VMSnapshotDelResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSnapshotDelResp *
       cloudmessage__vmsnapshot_del_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmsnapshot_del_resp__free_unpacked
                     (Cloudmessage__VMSnapshotDelResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSnapshotRevertReq methods */
void   cloudmessage__vmsnapshot_revert_req__init
                     (Cloudmessage__VMSnapshotRevertReq         *message);
size_t cloudmessage__vmsnapshot_revert_req__get_packed_size
                     (const Cloudmessage__VMSnapshotRevertReq   *message);
size_t cloudmessage__vmsnapshot_revert_req__pack
                     (const Cloudmessage__VMSnapshotRevertReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmsnapshot_revert_req__pack_to_buffer
                     (const Cloudmessage__VMSnapshotRevertReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSnapshotRevertReq *
       cloudmessage__vmsnapshot_revert_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmsnapshot_revert_req__free_unpacked
                     (Cloudmessage__VMSnapshotRevertReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSnapshotRevertResp methods */
void   cloudmessage__vmsnapshot_revert_resp__init
                     (Cloudmessage__VMSnapshotRevertResp         *message);
size_t cloudmessage__vmsnapshot_revert_resp__get_packed_size
                     (const Cloudmessage__VMSnapshotRevertResp   *message);
size_t cloudmessage__vmsnapshot_revert_resp__pack
                     (const Cloudmessage__VMSnapshotRevertResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmsnapshot_revert_resp__pack_to_buffer
                     (const Cloudmessage__VMSnapshotRevertResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSnapshotRevertResp *
       cloudmessage__vmsnapshot_revert_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmsnapshot_revert_resp__free_unpacked
                     (Cloudmessage__VMSnapshotRevertResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMMigrateReq methods */
void   cloudmessage__vmmigrate_req__init
                     (Cloudmessage__VMMigrateReq         *message);
size_t cloudmessage__vmmigrate_req__get_packed_size
                     (const Cloudmessage__VMMigrateReq   *message);
size_t cloudmessage__vmmigrate_req__pack
                     (const Cloudmessage__VMMigrateReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmmigrate_req__pack_to_buffer
                     (const Cloudmessage__VMMigrateReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMMigrateReq *
       cloudmessage__vmmigrate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmmigrate_req__free_unpacked
                     (Cloudmessage__VMMigrateReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMMigrateResp methods */
void   cloudmessage__vmmigrate_resp__init
                     (Cloudmessage__VMMigrateResp         *message);
size_t cloudmessage__vmmigrate_resp__get_packed_size
                     (const Cloudmessage__VMMigrateResp   *message);
size_t cloudmessage__vmmigrate_resp__pack
                     (const Cloudmessage__VMMigrateResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmmigrate_resp__pack_to_buffer
                     (const Cloudmessage__VMMigrateResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMMigrateResp *
       cloudmessage__vmmigrate_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmmigrate_resp__free_unpacked
                     (Cloudmessage__VMMigrateResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VifUsage methods */
void   cloudmessage__vif_usage__init
                     (Cloudmessage__VifUsage         *message);
size_t cloudmessage__vif_usage__get_packed_size
                     (const Cloudmessage__VifUsage   *message);
size_t cloudmessage__vif_usage__pack
                     (const Cloudmessage__VifUsage   *message,
                      uint8_t             *out);
size_t cloudmessage__vif_usage__pack_to_buffer
                     (const Cloudmessage__VifUsage   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VifUsage *
       cloudmessage__vif_usage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vif_usage__free_unpacked
                     (Cloudmessage__VifUsage *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMVifUsage methods */
void   cloudmessage__vmvif_usage__init
                     (Cloudmessage__VMVifUsage         *message);
size_t cloudmessage__vmvif_usage__get_packed_size
                     (const Cloudmessage__VMVifUsage   *message);
size_t cloudmessage__vmvif_usage__pack
                     (const Cloudmessage__VMVifUsage   *message,
                      uint8_t             *out);
size_t cloudmessage__vmvif_usage__pack_to_buffer
                     (const Cloudmessage__VMVifUsage   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMVifUsage *
       cloudmessage__vmvif_usage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmvif_usage__free_unpacked
                     (Cloudmessage__VMVifUsage *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMIntfInfo methods */
void   cloudmessage__vmintf_info__init
                     (Cloudmessage__VMIntfInfo         *message);
size_t cloudmessage__vmintf_info__get_packed_size
                     (const Cloudmessage__VMIntfInfo   *message);
size_t cloudmessage__vmintf_info__pack
                     (const Cloudmessage__VMIntfInfo   *message,
                      uint8_t             *out);
size_t cloudmessage__vmintf_info__pack_to_buffer
                     (const Cloudmessage__VMIntfInfo   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMIntfInfo *
       cloudmessage__vmintf_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmintf_info__free_unpacked
                     (Cloudmessage__VMIntfInfo *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMVifUsageReq methods */
void   cloudmessage__vmvif_usage_req__init
                     (Cloudmessage__VMVifUsageReq         *message);
size_t cloudmessage__vmvif_usage_req__get_packed_size
                     (const Cloudmessage__VMVifUsageReq   *message);
size_t cloudmessage__vmvif_usage_req__pack
                     (const Cloudmessage__VMVifUsageReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmvif_usage_req__pack_to_buffer
                     (const Cloudmessage__VMVifUsageReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMVifUsageReq *
       cloudmessage__vmvif_usage_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmvif_usage_req__free_unpacked
                     (Cloudmessage__VMVifUsageReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMVifUsageResp methods */
void   cloudmessage__vmvif_usage_resp__init
                     (Cloudmessage__VMVifUsageResp         *message);
size_t cloudmessage__vmvif_usage_resp__get_packed_size
                     (const Cloudmessage__VMVifUsageResp   *message);
size_t cloudmessage__vmvif_usage_resp__pack
                     (const Cloudmessage__VMVifUsageResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmvif_usage_resp__pack_to_buffer
                     (const Cloudmessage__VMVifUsageResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMVifUsageResp *
       cloudmessage__vmvif_usage_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmvif_usage_resp__free_unpacked
                     (Cloudmessage__VMVifUsageResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSetDiskReq methods */
void   cloudmessage__vmset_disk_req__init
                     (Cloudmessage__VMSetDiskReq         *message);
size_t cloudmessage__vmset_disk_req__get_packed_size
                     (const Cloudmessage__VMSetDiskReq   *message);
size_t cloudmessage__vmset_disk_req__pack
                     (const Cloudmessage__VMSetDiskReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmset_disk_req__pack_to_buffer
                     (const Cloudmessage__VMSetDiskReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSetDiskReq *
       cloudmessage__vmset_disk_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmset_disk_req__free_unpacked
                     (Cloudmessage__VMSetDiskReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VMSetDiskResp methods */
void   cloudmessage__vmset_disk_resp__init
                     (Cloudmessage__VMSetDiskResp         *message);
size_t cloudmessage__vmset_disk_resp__get_packed_size
                     (const Cloudmessage__VMSetDiskResp   *message);
size_t cloudmessage__vmset_disk_resp__pack
                     (const Cloudmessage__VMSetDiskResp   *message,
                      uint8_t             *out);
size_t cloudmessage__vmset_disk_resp__pack_to_buffer
                     (const Cloudmessage__VMSetDiskResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VMSetDiskResp *
       cloudmessage__vmset_disk_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmset_disk_resp__free_unpacked
                     (Cloudmessage__VMSetDiskResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__PGDeleteReq methods */
void   cloudmessage__pgdelete_req__init
                     (Cloudmessage__PGDeleteReq         *message);
size_t cloudmessage__pgdelete_req__get_packed_size
                     (const Cloudmessage__PGDeleteReq   *message);
size_t cloudmessage__pgdelete_req__pack
                     (const Cloudmessage__PGDeleteReq   *message,
                      uint8_t             *out);
size_t cloudmessage__pgdelete_req__pack_to_buffer
                     (const Cloudmessage__PGDeleteReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__PGDeleteReq *
       cloudmessage__pgdelete_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__pgdelete_req__free_unpacked
                     (Cloudmessage__PGDeleteReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__PGDeleteResp methods */
void   cloudmessage__pgdelete_resp__init
                     (Cloudmessage__PGDeleteResp         *message);
size_t cloudmessage__pgdelete_resp__get_packed_size
                     (const Cloudmessage__PGDeleteResp   *message);
size_t cloudmessage__pgdelete_resp__pack
                     (const Cloudmessage__PGDeleteResp   *message,
                      uint8_t             *out);
size_t cloudmessage__pgdelete_resp__pack_to_buffer
                     (const Cloudmessage__PGDeleteResp   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__PGDeleteResp *
       cloudmessage__pgdelete_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__pgdelete_resp__free_unpacked
                     (Cloudmessage__PGDeleteResp *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VmadapterVmLearnReq methods */
void   cloudmessage__vmadapter_vm_learn_req__init
                     (Cloudmessage__VmadapterVmLearnReq         *message);
size_t cloudmessage__vmadapter_vm_learn_req__get_packed_size
                     (const Cloudmessage__VmadapterVmLearnReq   *message);
size_t cloudmessage__vmadapter_vm_learn_req__pack
                     (const Cloudmessage__VmadapterVmLearnReq   *message,
                      uint8_t             *out);
size_t cloudmessage__vmadapter_vm_learn_req__pack_to_buffer
                     (const Cloudmessage__VmadapterVmLearnReq   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VmadapterVmLearnReq *
       cloudmessage__vmadapter_vm_learn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmadapter_vm_learn_req__free_unpacked
                     (Cloudmessage__VmadapterVmLearnReq *message,
                      ProtobufCAllocator *allocator);
/* Cloudmessage__VmadapterVmLearnReply methods */
void   cloudmessage__vmadapter_vm_learn_reply__init
                     (Cloudmessage__VmadapterVmLearnReply         *message);
size_t cloudmessage__vmadapter_vm_learn_reply__get_packed_size
                     (const Cloudmessage__VmadapterVmLearnReply   *message);
size_t cloudmessage__vmadapter_vm_learn_reply__pack
                     (const Cloudmessage__VmadapterVmLearnReply   *message,
                      uint8_t             *out);
size_t cloudmessage__vmadapter_vm_learn_reply__pack_to_buffer
                     (const Cloudmessage__VmadapterVmLearnReply   *message,
                      ProtobufCBuffer     *buffer);
Cloudmessage__VmadapterVmLearnReply *
       cloudmessage__vmadapter_vm_learn_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cloudmessage__vmadapter_vm_learn_reply__free_unpacked
                     (Cloudmessage__VmadapterVmLearnReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cloudmessage__VMVCenterInfoResp_Closure)
                 (const Cloudmessage__VMVCenterInfoResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMVCenterInfo_Closure)
                 (const Cloudmessage__VMVCenterInfo *message,
                  void *closure_data);
typedef void (*Cloudmessage__Message_Closure)
                 (const Cloudmessage__Message *message,
                  void *closure_data);
typedef void (*Cloudmessage__LaunchInfo_Closure)
                 (const Cloudmessage__LaunchInfo *message,
                  void *closure_data);
typedef void (*Cloudmessage__IntfInfo_Closure)
                 (const Cloudmessage__IntfInfo *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMAddReq_Closure)
                 (const Cloudmessage__VMAddReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMAddResp_Closure)
                 (const Cloudmessage__VMAddResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMDeleteReq_Closure)
                 (const Cloudmessage__VMDeleteReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMDeleteResp_Closure)
                 (const Cloudmessage__VMDeleteResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMOpsReq_Closure)
                 (const Cloudmessage__VMOpsReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMOpsResp_Closure)
                 (const Cloudmessage__VMOpsResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMStats_Closure)
                 (const Cloudmessage__VMStats *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMStatsReq_Closure)
                 (const Cloudmessage__VMStatsReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMStatsResp_Closure)
                 (const Cloudmessage__VMStatsResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMHAdisk_Closure)
                 (const Cloudmessage__VMHAdisk *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMUpdateReq_Closure)
                 (const Cloudmessage__VMUpdateReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMUpdateResp_Closure)
                 (const Cloudmessage__VMUpdateResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__PortUpdateReq_Closure)
                 (const Cloudmessage__PortUpdateReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__PortUpdateResp_Closure)
                 (const Cloudmessage__PortUpdateResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__StorageInfo_Closure)
                 (const Cloudmessage__StorageInfo *message,
                  void *closure_data);
typedef void (*Cloudmessage__HostsInfoReq_Closure)
                 (const Cloudmessage__HostsInfoReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__HostsInfoResp_Closure)
                 (const Cloudmessage__HostsInfoResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSnapshotAddReq_Closure)
                 (const Cloudmessage__VMSnapshotAddReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSnapshotAddResp_Closure)
                 (const Cloudmessage__VMSnapshotAddResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSnapshotDelReq_Closure)
                 (const Cloudmessage__VMSnapshotDelReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSnapshotDelResp_Closure)
                 (const Cloudmessage__VMSnapshotDelResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSnapshotRevertReq_Closure)
                 (const Cloudmessage__VMSnapshotRevertReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSnapshotRevertResp_Closure)
                 (const Cloudmessage__VMSnapshotRevertResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMMigrateReq_Closure)
                 (const Cloudmessage__VMMigrateReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMMigrateResp_Closure)
                 (const Cloudmessage__VMMigrateResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VifUsage_Closure)
                 (const Cloudmessage__VifUsage *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMVifUsage_Closure)
                 (const Cloudmessage__VMVifUsage *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMIntfInfo_Closure)
                 (const Cloudmessage__VMIntfInfo *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMVifUsageReq_Closure)
                 (const Cloudmessage__VMVifUsageReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMVifUsageResp_Closure)
                 (const Cloudmessage__VMVifUsageResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSetDiskReq_Closure)
                 (const Cloudmessage__VMSetDiskReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VMSetDiskResp_Closure)
                 (const Cloudmessage__VMSetDiskResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__PGDeleteReq_Closure)
                 (const Cloudmessage__PGDeleteReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__PGDeleteResp_Closure)
                 (const Cloudmessage__PGDeleteResp *message,
                  void *closure_data);
typedef void (*Cloudmessage__VmadapterVmLearnReq_Closure)
                 (const Cloudmessage__VmadapterVmLearnReq *message,
                  void *closure_data);
typedef void (*Cloudmessage__VmadapterVmLearnReply_Closure)
                 (const Cloudmessage__VmadapterVmLearnReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cloudmessage__vmresult_type__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__result__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__vmstates__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__vmops__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__vmupdate_flag__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__vmset_disk_flag__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmvcenter_info_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmvcenter_info__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__message__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__launch_info__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__intf_info__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__intf_info__intf_flag__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmadd_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmadd_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmdelete_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmdelete_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmops_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmops_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmstats__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmstats_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmstats_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmhadisk__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmupdate_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmupdate_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__port_update_req__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__port_update_req__port_update_actions__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__port_update_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__storage_info__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__storage_info__storage_type__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__hosts_info_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__hosts_info_resp__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__hosts_info_resp__host_status__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmsnapshot_add_req__descriptor;
extern const ProtobufCEnumDescriptor    cloudmessage__vmsnapshot_add_req__vmsnapshot_add_flag__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmsnapshot_add_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmsnapshot_del_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmsnapshot_del_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmsnapshot_revert_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmsnapshot_revert_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmmigrate_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmmigrate_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vif_usage__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmvif_usage__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmintf_info__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmvif_usage_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmvif_usage_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmset_disk_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmset_disk_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__pgdelete_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__pgdelete_resp__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmadapter_vm_learn_req__descriptor;
extern const ProtobufCMessageDescriptor cloudmessage__vmadapter_vm_learn_reply__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cloudmessage_2eproto__INCLUDED */
