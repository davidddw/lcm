/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: talker.proto */

#ifndef PROTOBUF_C_talker_2eproto__INCLUDED
#define PROTOBUF_C_talker_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Talker__VmOpsReply Talker__VmOpsReply;
typedef struct _Talker__VgatewayOpsReply Talker__VgatewayOpsReply;
typedef struct _Talker__ValveOpsReply Talker__ValveOpsReply;
typedef struct _Talker__NetworksOpsReply Talker__NetworksOpsReply;
typedef struct _Talker__VmwafOpsReply Talker__VmwafOpsReply;
typedef struct _Talker__Vl2AddReq Talker__Vl2AddReq;
typedef struct _Talker__Vl2DelReq Talker__Vl2DelReq;
typedef struct _Talker__Vl2ModifyReq Talker__Vl2ModifyReq;
typedef struct _Talker__VmAddReq Talker__VmAddReq;
typedef struct _Talker__VmReplaceReq Talker__VmReplaceReq;
typedef struct _Talker__VmDeleteReq Talker__VmDeleteReq;
typedef struct _Talker__VmStartReq Talker__VmStartReq;
typedef struct _Talker__VmStopReq Talker__VmStopReq;
typedef struct _Talker__VmModifyReq Talker__VmModifyReq;
typedef struct _Talker__TorswitchModifyReq Talker__TorswitchModifyReq;
typedef struct _Talker__VmIsolateReq Talker__VmIsolateReq;
typedef struct _Talker__VmReleaseReq Talker__VmReleaseReq;
typedef struct _Talker__VmCreateSnapshotReq Talker__VmCreateSnapshotReq;
typedef struct _Talker__VmRevertSnapshotReq Talker__VmRevertSnapshotReq;
typedef struct _Talker__VmDeleteSnapshotReq Talker__VmDeleteSnapshotReq;
typedef struct _Talker__ThirdVmAddReq Talker__ThirdVmAddReq;
typedef struct _Talker__VmMigrateReq Talker__VmMigrateReq;
typedef struct _Talker__NotifyProactive Talker__NotifyProactive;
typedef struct _Talker__NotifyBundleProactive Talker__NotifyBundleProactive;
typedef struct _Talker__VgwAddReq Talker__VgwAddReq;
typedef struct _Talker__VgatewayAddReq Talker__VgatewayAddReq;
typedef struct _Talker__ValveAddReq Talker__ValveAddReq;
typedef struct _Talker__VgwStartReq Talker__VgwStartReq;
typedef struct _Talker__VgwStopReq Talker__VgwStopReq;
typedef struct _Talker__VgwModifyReq Talker__VgwModifyReq;
typedef struct _Talker__VgatewayModifyReq Talker__VgatewayModifyReq;
typedef struct _Talker__VgatewayMigrateReq Talker__VgatewayMigrateReq;
typedef struct _Talker__ValveModifyReq Talker__ValveModifyReq;
typedef struct _Talker__ValveMigrateReq Talker__ValveMigrateReq;
typedef struct _Talker__VgwDelReq Talker__VgwDelReq;
typedef struct _Talker__VgatewayDelReq Talker__VgatewayDelReq;
typedef struct _Talker__ValveDelReq Talker__ValveDelReq;
typedef struct _Talker__VgwSwitchOpt Talker__VgwSwitchOpt;
typedef struct _Talker__VgwSwitchReq Talker__VgwSwitchReq;
typedef struct _Talker__ThirdVgwAddReq Talker__ThirdVgwAddReq;
typedef struct _Talker__TunnelQos Talker__TunnelQos;
typedef struct _Talker__Gre Talker__Gre;
typedef struct _Talker__VMWafAddReq Talker__VMWafAddReq;
typedef struct _Talker__VMWafDelReq Talker__VMWafDelReq;
typedef struct _Talker__SouthReq Talker__SouthReq;
typedef struct _Talker__SouthReply Talker__SouthReply;
typedef struct _Talker__HadiskOpsReq Talker__HadiskOpsReq;
typedef struct _Talker__HWDevInterfaceAttachReq Talker__HWDevInterfaceAttachReq;
typedef struct _Talker__HWDevInterfaceDetachReq Talker__HWDevInterfaceDetachReq;
typedef struct _Talker__HWDevOpsReply Talker__HWDevOpsReply;
typedef struct _Talker__InterfaceAttachReq Talker__InterfaceAttachReq;
typedef struct _Talker__InterfaceDetachReq Talker__InterfaceDetachReq;
typedef struct _Talker__InterfacesConfigReq Talker__InterfacesConfigReq;
typedef struct _Talker__InterfacesOpsReply Talker__InterfacesOpsReply;
typedef struct _Talker__PMAddReq Talker__PMAddReq;
typedef struct _Talker__PMOpsReq Talker__PMOpsReq;
typedef struct _Talker__PMNic Talker__PMNic;
typedef struct _Talker__PMDeployReq Talker__PMDeployReq;
typedef struct _Talker__PMOpsReply Talker__PMOpsReply;
typedef struct _Talker__HostBootReq Talker__HostBootReq;
typedef struct _Talker__HostOpsReply Talker__HostOpsReply;
typedef struct _Talker__ChargeStatsReq Talker__ChargeStatsReq;
typedef struct _Talker__OrderChargeReq Talker__OrderChargeReq;
typedef struct _Talker__OrderChargeVM Talker__OrderChargeVM;
typedef struct _Talker__OrderChargeVGW Talker__OrderChargeVGW;
typedef struct _Talker__OrderChargeISP Talker__OrderChargeISP;
typedef struct _Talker__OrderChargeBW Talker__OrderChargeBW;
typedef struct _Talker__ChargeStatsReply Talker__ChargeStatsReply;
typedef struct _Talker__OrderChargeReply Talker__OrderChargeReply;
typedef struct _Talker__VmadapterVmLearnReq Talker__VmadapterVmLearnReq;
typedef struct _Talker__VmadapterVmLearnReply Talker__VmadapterVmLearnReply;
typedef struct _Talker__Message Talker__Message;


/* --- enums --- */

typedef enum _Talker__AllocType {
  TALKER__ALLOC_TYPE__AUTO = 1,
  TALKER__ALLOC_TYPE__MANUAL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__ALLOC_TYPE)
} Talker__AllocType;
typedef enum _Talker__Result {
  TALKER__RESULT__SUCCESS = 0,
  TALKER__RESULT__FAIL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__RESULT)
} Talker__Result;
typedef enum _Talker__VmType {
  TALKER__VM_TYPE__VM = 1,
  TALKER__VM_TYPE__VGW = 2,
  TALKER__VM_TYPE__VGATEWAY = 3,
  TALKER__VM_TYPE__SNAPSHOT = 4,
  TALKER__VM_TYPE__VALVE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__VM_TYPE)
} Talker__VmType;
typedef enum _Talker__VmOps {
  TALKER__VM_OPS__NONE = 0,
  TALKER__VM_OPS__VM_CREATE = 1,
  TALKER__VM_OPS__VM_START = 2,
  TALKER__VM_OPS__VM_STOP = 3,
  TALKER__VM_OPS__VM_DELETE = 4,
  TALKER__VM_OPS__VM_MODIFY = 5,
  TALKER__VM_OPS__SNAPSHOT_CREATE = 6,
  TALKER__VM_OPS__SNAPSHOT_REVERT = 7,
  TALKER__VM_OPS__SNAPSHOT_DELETE = 8,
  TALKER__VM_OPS__VM_HADISK_CREATE = 9,
  TALKER__VM_OPS__VM_HADISK_DELETE = 10,
  TALKER__VM_OPS__VM_HADISK_PLUG = 11,
  TALKER__VM_OPS__VM_HADISK_UNPLUG = 12,
  TALKER__VM_OPS__VM_HADISK_MODIFY = 13,
  TALKER__VM_OPS__VM_REPLACE = 14,
  TALKER__VM_OPS__VGW_SWITCH = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__VM_OPS)
} Talker__VmOps;
typedef enum _Talker__VGatewayOps {
  TALKER__VGATEWAY_OPS__VGATEWAY_NONE = 0,
  TALKER__VGATEWAY_OPS__VGATEWAY_CREATE = 1,
  TALKER__VGATEWAY_OPS__VGATEWAY_DELETE = 2,
  TALKER__VGATEWAY_OPS__VGATEWAY_MODIFY = 3,
  TALKER__VGATEWAY_OPS__VGATEWAY_MIGRATE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__VGATEWAY_OPS)
} Talker__VGatewayOps;
typedef enum _Talker__ValveOps {
  TALKER__VALVE_OPS__VALVE_NONE = 0,
  TALKER__VALVE_OPS__VALVE_CREATE = 1,
  TALKER__VALVE_OPS__VALVE_DELETE = 2,
  TALKER__VALVE_OPS__VALVE_MODIFY = 3,
  TALKER__VALVE_OPS__VALVE_MIGRATE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__VALVE_OPS)
} Talker__ValveOps;
typedef enum _Talker__NetworksOps {
  TALKER__NETWORKS_OPS__NETWORKS_NONE = 0,
  TALKER__NETWORKS_OPS__NETWORKS_VL2_CREATE = 1,
  TALKER__NETWORKS_OPS__NETWORKS_VL2_DELETE = 2,
  TALKER__NETWORKS_OPS__NETWORKS_VL2_MODIFY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__NETWORKS_OPS)
} Talker__NetworksOps;
typedef enum _Talker__VmwafOps {
  TALKER__VMWAF_OPS__VMWAF_NONE = 0,
  TALKER__VMWAF_OPS__VMWAF_CONF_ADD = 1,
  TALKER__VMWAF_OPS__VMWAF_CONF_DEL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__VMWAF_OPS)
} Talker__VmwafOps;
typedef enum _Talker__HadiskOps {
  TALKER__HADISK_OPS__HA_DISK_PLUG = 1,
  TALKER__HADISK_OPS__HA_DISK_UNPLUG = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__HADISK_OPS)
} Talker__HadiskOps;
typedef enum _Talker__HWDevOps {
  TALKER__HWDEV_OPS__HWDEV_NONE = 0,
  TALKER__HWDEV_OPS__HWDEV_ATTACH = 1,
  TALKER__HWDEV_OPS__HWDEV_DETACH = 2,
  TALKER__HWDEV_OPS__HWDEV_CONNECT = 3,
  TALKER__HWDEV_OPS__HWDEV_DISCONNECT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__HWDEV_OPS)
} Talker__HWDevOps;
typedef enum _Talker__InterfaceOps {
  TALKER__INTERFACE_OPS__INTERFACE_NONE = 0,
  TALKER__INTERFACE_OPS__INTERFACE_ATTACH = 1,
  TALKER__INTERFACE_OPS__INTERFACE_DETACH = 2,
  TALKER__INTERFACE_OPS__INTERFACE_CONFIG = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__INTERFACE_OPS)
} Talker__InterfaceOps;
typedef enum _Talker__ResourceType {
  TALKER__RESOURCE_TYPE__RESOURCE_NONE = 0,
  TALKER__RESOURCE_TYPE__COMPUTE_RESOUCE = 1,
  TALKER__RESOURCE_TYPE__VM_RESOURCE = 2,
  TALKER__RESOURCE_TYPE__VGW_RESOURCE = 3,
  TALKER__RESOURCE_TYPE__VGW_HA_RESOURCE = 4,
  TALKER__RESOURCE_TYPE__VM_SERVER_RESOURCE = 5,
  TALKER__RESOURCE_TYPE__VGW_SERVER_RESOURCE = 6,
  TALKER__RESOURCE_TYPE__BK_VM_HEALTH_RESOURCE = 7,
  TALKER__RESOURCE_TYPE__HOST_HA_RESOURCE = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__RESOURCE_TYPE)
} Talker__ResourceType;
typedef enum _Talker__ResourceState {
  TALKER__RESOURCE_STATE__RESOURCE_DOWN = 0,
  TALKER__RESOURCE_STATE__RESOURCE_UP = 1,
  TALKER__RESOURCE_STATE__RESOURCE_MASTER = 2,
  TALKER__RESOURCE_STATE__RESOURCE_BACKUP = 3,
  TALKER__RESOURCE_STATE__RESOURCE_FAULT = 4,
  TALKER__RESOURCE_STATE__RESOURCE_UNKNOWN = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__RESOURCE_STATE)
} Talker__ResourceState;
typedef enum _Talker__ModifyMask {
  TALKER__MODIFY_MASK__DISK_ADD = 1,
  TALKER__MODIFY_MASK__DISK_DEL = 2,
  TALKER__MODIFY_MASK__DISK_SYS_RESIZE = 4,
  TALKER__MODIFY_MASK__DISK_USER_RESIZE = 8,
  TALKER__MODIFY_MASK__CPU_RESIZE = 16,
  TALKER__MODIFY_MASK__MEM_RESIZE = 32,
  TALKER__MODIFY_MASK__IP_MODIFY = 64,
  TALKER__MODIFY_MASK__BW_MODIFY = 128,
  TALKER__MODIFY_MASK__HA_DISK = 256,
  TALKER__MODIFY_MASK__VL2_ID = 512,
  TALKER__MODIFY_MASK__MASK_ALL = 1023
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__MODIFY_MASK)
} Talker__ModifyMask;
typedef enum _Talker__HaSwitchMode {
  TALKER__HA_SWITCH_MODE__AUTO_MODE = 1,
  TALKER__HA_SWITCH_MODE__MANUAL_MODE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__HA_SWITCH_MODE)
} Talker__HaSwitchMode;
typedef enum _Talker__HTTPOps {
  TALKER__HTTPOPS__HTTP_GET = 0,
  TALKER__HTTPOPS__HTTP_POST = 1,
  TALKER__HTTPOPS__HTTP_PUT = 2,
  TALKER__HTTPOPS__HTTP_DELETE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__HTTPOPS)
} Talker__HTTPOps;
typedef enum _Talker__SouthDest {
  TALKER__SOUTH_DEST__LCG = 0,
  TALKER__SOUTH_DEST__RYU = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__SOUTH_DEST)
} Talker__SouthDest;
typedef enum _Talker__SouthURI {
  TALKER__SOUTH_URI__TUNNEL_QOS = 0,
  TALKER__SOUTH_URI__GRE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__SOUTH_URI)
} Talker__SouthURI;
typedef enum _Talker__PMOSType {
  TALKER__PMOSTYPE__CENTOS6_5 = 1,
  TALKER__PMOSTYPE__XENSERVER6_2 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__PMOSTYPE)
} Talker__PMOSType;
typedef enum _Talker__PMOps {
  TALKER__PMOPS__PM_ADD = 1,
  TALKER__PMOPS__PM_START = 2,
  TALKER__PMOPS__PM_STOP = 3,
  TALKER__PMOPS__PM_DEPLOY = 4,
  TALKER__PMOPS__PM_DELETE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__PMOPS)
} Talker__PMOps;
typedef enum _Talker__PMStates {
  TALKER__PMSTATES__PM_RUNNING = 1,
  TALKER__PMSTATES__PM_HALTED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TALKER__PMSTATES)
} Talker__PMStates;

/* --- messages --- */

struct  _Talker__VmOpsReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_type;
  Talker__VmType type;
  protobuf_c_boolean has_ops;
  Talker__VmOps ops;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__VM_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_ops_reply__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__VgatewayOpsReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_type;
  Talker__VmType type;
  protobuf_c_boolean has_ops;
  Talker__VGatewayOps ops;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__VGATEWAY_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgateway_ops_reply__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__ValveOpsReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_type;
  Talker__VmType type;
  protobuf_c_boolean has_ops;
  Talker__ValveOps ops;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__VALVE_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__valve_ops_reply__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__NetworksOpsReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_ops;
  Talker__NetworksOps ops;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__NETWORKS_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__networks_ops_reply__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__VmwafOpsReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_ops;
  Talker__VmwafOps ops;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__VMWAF_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vmwaf_ops_reply__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Talker__Vl2AddReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
  protobuf_c_boolean has_vdc_id;
  uint32_t vdc_id;
};
#define TALKER__VL2_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vl2_add_req__descriptor) \
    , 0,0, 0,0 }


struct  _Talker__Vl2DelReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
  protobuf_c_boolean has_vdc_id;
  uint32_t vdc_id;
};
#define TALKER__VL2_DEL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vl2_del_req__descriptor) \
    , 0,0, 0,0 }


struct  _Talker__Vl2ModifyReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
  protobuf_c_boolean has_rack_id;
  uint32_t rack_id;
  protobuf_c_boolean has_vlantag;
  uint32_t vlantag;
};
#define TALKER__VL2_MODIFY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vl2_modify_req__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Talker__VmAddReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_alloc_type;
  Talker__AllocType alloc_type;
  char *vm_ids;
  char *pool_ids;
  char *vm_passwd;
};
#define TALKER__VM_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_add_req__descriptor) \
    , 0,0, NULL, NULL, NULL }


struct  _Talker__VmReplaceReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
};
#define TALKER__VM_REPLACE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_replace_req__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Talker__VmDeleteReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
};
#define TALKER__VM_DELETE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_delete_req__descriptor) \
    , 0,0, 0,0u, 0,0u }


struct  _Talker__VmStartReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
};
#define TALKER__VM_START_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_start_req__descriptor) \
    , 0,0, 0,0u, 0,0u }


struct  _Talker__VmStopReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
};
#define TALKER__VM_STOP_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_stop_req__descriptor) \
    , 0,0, 0,0u, 0,0u }


struct  _Talker__VmModifyReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vm_id;
  uint32_t vm_id;
  protobuf_c_boolean has_mask;
  Talker__ModifyMask mask;
  protobuf_c_boolean has_vcpu_num;
  uint32_t vcpu_num;
  protobuf_c_boolean has_mem_size;
  uint32_t mem_size;
  protobuf_c_boolean has_usr_disk_size;
  uint32_t usr_disk_size;
  protobuf_c_boolean has_ha_disk_size;
  uint32_t ha_disk_size;
  protobuf_c_boolean has_vdc_id;
  uint32_t vdc_id;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
  char *ip;
};
#define TALKER__VM_MODIFY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_modify_req__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Talker__TorswitchModifyReq
{
  ProtobufCMessage base;
  char *ip;
  protobuf_c_boolean has_state;
  Talker__ResourceState state;
};
#define TALKER__TORSWITCH_MODIFY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__torswitch_modify_req__descriptor) \
    , NULL, 0,0 }


struct  _Talker__VmIsolateReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
};
#define TALKER__VM_ISOLATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_isolate_req__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Talker__VmReleaseReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_vl2_id;
  uint32_t vl2_id;
};
#define TALKER__VM_RELEASE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_release_req__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Talker__VmCreateSnapshotReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vm_id;
  uint32_t vm_id;
  protobuf_c_boolean has_snapshot_id;
  uint32_t snapshot_id;
};
#define TALKER__VM_CREATE_SNAPSHOT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_create_snapshot_req__descriptor) \
    , 0,0, 0,0 }


struct  _Talker__VmRevertSnapshotReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vm_id;
  uint32_t vm_id;
  protobuf_c_boolean has_snapshot_id;
  uint32_t snapshot_id;
};
#define TALKER__VM_REVERT_SNAPSHOT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_revert_snapshot_req__descriptor) \
    , 0,0, 0,0 }


struct  _Talker__VmDeleteSnapshotReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vm_id;
  uint32_t vm_id;
  protobuf_c_boolean has_snapshot_id;
  uint32_t snapshot_id;
};
#define TALKER__VM_DELETE_SNAPSHOT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_delete_snapshot_req__descriptor) \
    , 0,0, 0,0 }


struct  _Talker__ThirdVmAddReq
{
  ProtobufCMessage base;
  char *vm_ids;
};
#define TALKER__THIRD_VM_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__third_vm_add_req__descriptor) \
    , NULL }


struct  _Talker__VmMigrateReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vm_id;
  uint32_t vm_id;
  protobuf_c_boolean has_vm_type;
  uint32_t vm_type;
  char *launch_server;
  char *sr_name;
};
#define TALKER__VM_MIGRATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vm_migrate_req__descriptor) \
    , 0,0, 0,1u, NULL, NULL }


struct  _Talker__NotifyProactive
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_type;
  Talker__ResourceType type;
  protobuf_c_boolean has_state;
  Talker__ResourceState state;
  char *launch_server;
  size_t n_ips;
  char **ips;
};
#define TALKER__NOTIFY_PROACTIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__notify_proactive__descriptor) \
    , 0,0, 0,0, 0,0, NULL, 0,NULL }


struct  _Talker__NotifyBundleProactive
{
  ProtobufCMessage base;
  size_t n_bundle;
  Talker__NotifyProactive **bundle;
};
#define TALKER__NOTIFY_BUNDLE_PROACTIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__notify_bundle_proactive__descriptor) \
    , 0,NULL }


struct  _Talker__VgwAddReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_alloc_type;
  Talker__AllocType alloc_type;
  char *vgw_ids;
};
#define TALKER__VGW_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgw_add_req__descriptor) \
    , 0,0, NULL }


struct  _Talker__VgatewayAddReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_alloc_type;
  Talker__AllocType alloc_type;
  char *vgw_ids;
};
#define TALKER__VGATEWAY_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgateway_add_req__descriptor) \
    , 0,0, NULL }


struct  _Talker__ValveAddReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_alloc_type;
  Talker__AllocType alloc_type;
  char *vgw_ids;
};
#define TALKER__VALVE_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__valve_add_req__descriptor) \
    , 0,0, NULL }


struct  _Talker__VgwStartReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
};
#define TALKER__VGW_START_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgw_start_req__descriptor) \
    , 0,0 }


struct  _Talker__VgwStopReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
};
#define TALKER__VGW_STOP_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgw_stop_req__descriptor) \
    , 0,0 }


struct  _Talker__VgwModifyReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
};
#define TALKER__VGW_MODIFY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgw_modify_req__descriptor) \
    , 0,0 }


struct  _Talker__VgatewayModifyReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *wanslist;
  char *lanslist;
};
#define TALKER__VGATEWAY_MODIFY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgateway_modify_req__descriptor) \
    , 0,0, NULL, NULL }


struct  _Talker__VgatewayMigrateReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *gw_launch_server;
};
#define TALKER__VGATEWAY_MIGRATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgateway_migrate_req__descriptor) \
    , 0,0, NULL }


struct  _Talker__ValveModifyReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *wanslist;
  char *lanslist;
};
#define TALKER__VALVE_MODIFY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__valve_modify_req__descriptor) \
    , 0,0, NULL, NULL }


struct  _Talker__ValveMigrateReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *gw_launch_server;
};
#define TALKER__VALVE_MIGRATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__valve_migrate_req__descriptor) \
    , 0,0, NULL }


struct  _Talker__VgwDelReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
};
#define TALKER__VGW_DEL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgw_del_req__descriptor) \
    , 0,0 }


struct  _Talker__VgatewayDelReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
};
#define TALKER__VGATEWAY_DEL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgateway_del_req__descriptor) \
    , 0,0 }


struct  _Talker__ValveDelReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
};
#define TALKER__VALVE_DEL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__valve_del_req__descriptor) \
    , 0,0 }


struct  _Talker__VgwSwitchOpt
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mode;
  Talker__HaSwitchMode mode;
};
#define TALKER__VGW_SWITCH_OPT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgw_switch_opt__descriptor) \
    , 0,0 }


struct  _Talker__VgwSwitchReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  Talker__VgwSwitchOpt *mode;
};
#define TALKER__VGW_SWITCH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vgw_switch_req__descriptor) \
    , 0,0, NULL }


struct  _Talker__ThirdVgwAddReq
{
  ProtobufCMessage base;
  char *vgw_ids;
};
#define TALKER__THIRD_VGW_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__third_vgw_add_req__descriptor) \
    , NULL }


struct  _Talker__TunnelQos
{
  ProtobufCMessage base;
  protobuf_c_boolean has_minrate;
  uint32_t minrate;
  protobuf_c_boolean has_maxrate;
  uint32_t maxrate;
};
#define TALKER__TUNNEL_QOS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__tunnel_qos__descriptor) \
    , 0,0, 0,0 }


struct  _Talker__Gre
{
  ProtobufCMessage base;
  char *local_ip;
  char *remote_ip;
  char *bind_port;
  char *switch_;
  char *gre_name;
};
#define TALKER__GRE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__gre__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _Talker__VMWafAddReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
};
#define TALKER__VMWAF_ADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vmwaf_add_req__descriptor) \
    , 0,0 }


struct  _Talker__VMWafDelReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
};
#define TALKER__VMWAF_DEL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vmwaf_del_req__descriptor) \
    , 0,0 }


struct  _Talker__SouthReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ops;
  Talker__HTTPOps ops;
  protobuf_c_boolean has_uri;
  Talker__SouthURI uri;
  protobuf_c_boolean has_dest;
  Talker__SouthDest dest;
  char *ip;
  protobuf_c_boolean has_port;
  uint32_t port;
  char *version;
  Talker__TunnelQos *tunnel_qos;
  Talker__Gre *gre;
};
#define TALKER__SOUTH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__south_req__descriptor) \
    , 0,0, 0,0, 0,0, NULL, 0,0, NULL, NULL, NULL }


struct  _Talker__SouthReply
{
  ProtobufCMessage base;
  char *result;
};
#define TALKER__SOUTH_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__south_reply__descriptor) \
    , NULL }


struct  _Talker__HadiskOpsReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vdisk_id;
  uint32_t vdisk_id;
  protobuf_c_boolean has_ops;
  Talker__HadiskOps ops;
};
#define TALKER__HADISK_OPS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__hadisk_ops_req__descriptor) \
    , 0,0, 0,0 }


struct  _Talker__HWDevInterfaceAttachReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hwdev_id;
  uint32_t hwdev_id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_if_id;
  uint32_t if_id;
  protobuf_c_boolean has_if_index;
  uint32_t if_index;
  protobuf_c_boolean has_if_subnetid;
  uint32_t if_subnetid;
  protobuf_c_boolean has_subnet_type;
  uint32_t subnet_type;
  protobuf_c_boolean has_if_bandwidth;
  uint64_t if_bandwidth;
  protobuf_c_boolean has_switch_id;
  uint32_t switch_id;
  protobuf_c_boolean has_switch_port;
  uint32_t switch_port;
};
#define TALKER__HWDEV_INTERFACE_ATTACH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__hwdev_interface_attach_req__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__HWDevInterfaceDetachReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hwdev_id;
  uint32_t hwdev_id;
  protobuf_c_boolean has_vnet_id;
  uint32_t vnet_id;
  protobuf_c_boolean has_if_id;
  uint32_t if_id;
  protobuf_c_boolean has_if_index;
  uint32_t if_index;
  protobuf_c_boolean has_if_subnetid;
  uint32_t if_subnetid;
  protobuf_c_boolean has_subnet_type;
  uint32_t subnet_type;
  protobuf_c_boolean has_switch_id;
  uint32_t switch_id;
  protobuf_c_boolean has_switch_port;
  uint32_t switch_port;
};
#define TALKER__HWDEV_INTERFACE_DETACH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__hwdev_interface_detach_req__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__HWDevOpsReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hwdev_id;
  uint32_t hwdev_id;
  protobuf_c_boolean has_if_id;
  uint32_t if_id;
  protobuf_c_boolean has_ops;
  Talker__HWDevOps ops;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__HWDEV_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__hwdev_ops_reply__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__InterfaceAttachReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_if_id;
  uint32_t if_id;
  protobuf_c_boolean has_if_index;
  uint32_t if_index;
  protobuf_c_boolean has_if_subnetid;
  uint32_t if_subnetid;
  protobuf_c_boolean has_if_vlantag;
  uint32_t if_vlantag;
  protobuf_c_boolean has_if_bandwidth;
  uint64_t if_bandwidth;
  char *launch_server;
};
#define TALKER__INTERFACE_ATTACH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__interface_attach_req__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Talker__InterfaceDetachReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_if_id;
  uint32_t if_id;
  protobuf_c_boolean has_if_index;
  uint32_t if_index;
  protobuf_c_boolean has_if_subnetid;
  uint32_t if_subnetid;
  char *launch_server;
};
#define TALKER__INTERFACE_DETACH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__interface_detach_req__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Talker__InterfacesConfigReq
{
  ProtobufCMessage base;
  char *if_ids;
};
#define TALKER__INTERFACES_CONFIG_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__interfaces_config_req__descriptor) \
    , NULL }


struct  _Talker__InterfacesOpsReply
{
  ProtobufCMessage base;
  char *if_ids;
  protobuf_c_boolean has_result;
  Talker__Result result;
  protobuf_c_boolean has_ops;
  Talker__InterfaceOps ops;
};
#define TALKER__INTERFACES_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__interfaces_ops_reply__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _Talker__PMAddReq
{
  ProtobufCMessage base;
  char *pm_ipmi_ip;
  char *pm_ipmi_user_name;
  char *pm_ipmi_passwd;
};
#define TALKER__PMADD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__pmadd_req__descriptor) \
    , NULL, NULL, NULL }


struct  _Talker__PMOpsReq
{
  ProtobufCMessage base;
  char *pm_ipmi_ip;
  protobuf_c_boolean has_pm_ops;
  Talker__PMOps pm_ops;
};
#define TALKER__PMOPS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__pmops_req__descriptor) \
    , NULL, 0,0 }


struct  _Talker__PMNic
{
  ProtobufCMessage base;
  char *device_name;
  char *ipaddr;
  char *netmask;
  char *gateway;
  char *dns;
};
#define TALKER__PMNIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__pmnic__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _Talker__PMDeployReq
{
  ProtobufCMessage base;
  char *pm_ipmi_ip;
  protobuf_c_boolean has_os_type;
  Talker__PMOSType os_type;
  char *root_passwd;
  char *hostname;
  char *pm_ipmi_mac;
  Talker__PMNic *pm_nic;
};
#define TALKER__PMDEPLOY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__pmdeploy_req__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, NULL }


struct  _Talker__PMOpsReply
{
  ProtobufCMessage base;
  char *pm_ipmi_ip;
  protobuf_c_boolean has_ops;
  Talker__PMOps ops;
  protobuf_c_boolean has_state;
  Talker__PMStates state;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__PMOPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__pmops_reply__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__HostBootReq
{
  ProtobufCMessage base;
  char *host_ip;
};
#define TALKER__HOST_BOOT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__host_boot_req__descriptor) \
    , NULL }


struct  _Talker__HostOpsReply
{
  ProtobufCMessage base;
  char *host_ip;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__HOST_OPS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__host_ops_reply__descriptor) \
    , NULL, 0,0 }


struct  _Talker__ChargeStatsReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_user_id;
  uint32_t user_id;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
  protobuf_c_boolean has_end_time;
  uint32_t end_time;
};
#define TALKER__CHARGE_STATS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__charge_stats_req__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Talker__OrderChargeReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_user_id;
  uint32_t user_id;
  protobuf_c_boolean has_check_charge_days;
  uint32_t check_charge_days;
  size_t n_vms;
  Talker__OrderChargeVM **vms;
  size_t n_vgws;
  Talker__OrderChargeVGW **vgws;
  size_t n_isps;
  Talker__OrderChargeISP **isps;
  size_t n_bws;
  Talker__OrderChargeBW **bws;
};
#define TALKER__ORDER_CHARGE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__order_charge_req__descriptor) \
    , 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Talker__OrderChargeVM
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vm_num;
  uint32_t vm_num;
  char *vm_ps_lcuuid;
};
#define TALKER__ORDER_CHARGE_VM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__order_charge_vm__descriptor) \
    , 0,0, NULL }


struct  _Talker__OrderChargeVGW
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vgw_num;
  uint32_t vgw_num;
  char *vgw_ps_lcuuid;
};
#define TALKER__ORDER_CHARGE_VGW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__order_charge_vgw__descriptor) \
    , 0,0, NULL }


struct  _Talker__OrderChargeISP
{
  ProtobufCMessage base;
  protobuf_c_boolean has_isp;
  uint32_t isp;
  char *isp_ps_lcuuid;
  protobuf_c_boolean has_isp_num;
  uint32_t isp_num;
};
#define TALKER__ORDER_CHARGE_ISP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__order_charge_isp__descriptor) \
    , 0,0, NULL, 0,0 }


struct  _Talker__OrderChargeBW
{
  ProtobufCMessage base;
  protobuf_c_boolean has_isp;
  uint32_t isp;
  char *bw_ps_lcuuid;
  protobuf_c_boolean has_bandwidth_num;
  uint64_t bandwidth_num;
};
#define TALKER__ORDER_CHARGE_BW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__order_charge_bw__descriptor) \
    , 0,0, NULL, 0,0 }


struct  _Talker__ChargeStatsReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_user_id;
  uint32_t user_id;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
  protobuf_c_boolean has_end_time;
  uint32_t end_time;
  char *charge_amount;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__CHARGE_STATS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__charge_stats_reply__descriptor) \
    , 0,0, 0,0, 0,0, NULL, 0,0, 0,0 }


struct  _Talker__OrderChargeReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_user_id;
  uint32_t user_id;
  protobuf_c_boolean has_order_ok;
  uint32_t order_ok;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
};
#define TALKER__ORDER_CHARGE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__order_charge_reply__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _Talker__VmadapterVmLearnReq
{
  ProtobufCMessage base;
  uint32_t vc_id;
  char *vcenter_ip;
  char *vc_username;
  char *vc_password;
};
#define TALKER__VMADAPTER_VM_LEARN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vmadapter_vm_learn_req__descriptor) \
    , 0, NULL, NULL, NULL }


struct  _Talker__VmadapterVmLearnReply
{
  ProtobufCMessage base;
  char *vcenter_ip;
  protobuf_c_boolean has_err;
  uint32_t err;
  protobuf_c_boolean has_result;
  Talker__Result result;
  char *vm_info;
};
#define TALKER__VMADAPTER_VM_LEARN_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__vmadapter_vm_learn_reply__descriptor) \
    , NULL, 0,0, 0,0, NULL }


struct  _Talker__Message
{
  ProtobufCMessage base;
  Talker__VmOpsReply *vm_ops_reply;
  Talker__NetworksOpsReply *networks_ops_reply;
  Talker__VmwafOpsReply *vmwaf_ops_reply;
  Talker__PMOpsReply *pm_ops_reply;
  Talker__ChargeStatsReply *charge_reply;
  Talker__OrderChargeReply *order_charge_reply;
  Talker__Vl2AddReq *vl2_add_req;
  Talker__Vl2DelReq *vl2_del_req;
  Talker__Vl2ModifyReq *vl2_modify_req;
  Talker__VmAddReq *vm_add_req;
  Talker__VmModifyReq *vm_modify_req;
  Talker__VmStartReq *vm_start_req;
  Talker__VmStopReq *vm_stop_req;
  Talker__VmIsolateReq *vm_isolate_req;
  Talker__VmReleaseReq *vm_release_req;
  Talker__VmDeleteReq *vm_delete_req;
  Talker__VmCreateSnapshotReq *vm_create_snapshot_req;
  Talker__VmRevertSnapshotReq *vm_revert_snapshot_req;
  Talker__VmDeleteSnapshotReq *vm_delete_snapshot_req;
  Talker__VmReplaceReq *vm_replace_req;
  Talker__ThirdVmAddReq *third_vm_add_req;
  Talker__VmMigrateReq *vm_migrate_req;
  Talker__VgwAddReq *vgw_add_req;
  Talker__VgwStartReq *vgw_start_req;
  Talker__VgwStopReq *vgw_stop_req;
  Talker__VgwDelReq *vgw_del_req;
  Talker__VgwSwitchReq *vgw_switch_req;
  Talker__VgwModifyReq *vgw_modify_req;
  Talker__ThirdVgwAddReq *third_vgw_add_req;
  Talker__HadiskOpsReq *ha_disk_ops_req;
  Talker__NotifyBundleProactive *notify_bundle;
  Talker__SouthReq *south_req;
  Talker__SouthReply *south_reply;
  Talker__HostBootReq *host_boot_req;
  Talker__HostOpsReply *host_ops_reply;
  Talker__VMWafAddReq *vmwaf_add_req;
  Talker__VMWafDelReq *vmwaf_del_req;
  Talker__TorswitchModifyReq *torswitch_modify_req;
  Talker__InterfaceAttachReq *interface_attach_req;
  Talker__InterfaceDetachReq *interface_detach_req;
  Talker__InterfacesConfigReq *interfaces_config_req;
  Talker__InterfacesOpsReply *interfaces_ops_reply;
  Talker__VgatewayAddReq *vgateway_add_req;
  Talker__VgatewayModifyReq *vgateway_modify_req;
  Talker__VgatewayDelReq *vgateway_del_req;
  Talker__VgatewayOpsReply *vgateway_ops_reply;
  Talker__VgatewayMigrateReq *vgateway_migrate_req;
  Talker__PMAddReq *pm_add_req;
  Talker__PMOpsReq *pm_ops_req;
  Talker__PMDeployReq *pm_deploy_req;
  Talker__HWDevInterfaceAttachReq *hwdev_interface_attach_req;
  Talker__HWDevInterfaceDetachReq *hwdev_interface_detach_req;
  Talker__HWDevOpsReply *hwdev_ops_reply;
  Talker__ChargeStatsReq *charge_req;
  Talker__OrderChargeReq *order_charge;
  Talker__ValveAddReq *valve_add_req;
  Talker__ValveModifyReq *valve_modify_req;
  Talker__ValveDelReq *valve_del_req;
  Talker__ValveOpsReply *valve_ops_reply;
  Talker__ValveMigrateReq *valve_migrate_req;
  Talker__VmadapterVmLearnReq *vmadapter_vm_learn_req;
  Talker__VmadapterVmLearnReply *vmadapter_vm_learn_reply;
};
#define TALKER__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&talker__message__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Talker__VmOpsReply methods */
void   talker__vm_ops_reply__init
                     (Talker__VmOpsReply         *message);
size_t talker__vm_ops_reply__get_packed_size
                     (const Talker__VmOpsReply   *message);
size_t talker__vm_ops_reply__pack
                     (const Talker__VmOpsReply   *message,
                      uint8_t             *out);
size_t talker__vm_ops_reply__pack_to_buffer
                     (const Talker__VmOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmOpsReply *
       talker__vm_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_ops_reply__free_unpacked
                     (Talker__VmOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgatewayOpsReply methods */
void   talker__vgateway_ops_reply__init
                     (Talker__VgatewayOpsReply         *message);
size_t talker__vgateway_ops_reply__get_packed_size
                     (const Talker__VgatewayOpsReply   *message);
size_t talker__vgateway_ops_reply__pack
                     (const Talker__VgatewayOpsReply   *message,
                      uint8_t             *out);
size_t talker__vgateway_ops_reply__pack_to_buffer
                     (const Talker__VgatewayOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgatewayOpsReply *
       talker__vgateway_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgateway_ops_reply__free_unpacked
                     (Talker__VgatewayOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__ValveOpsReply methods */
void   talker__valve_ops_reply__init
                     (Talker__ValveOpsReply         *message);
size_t talker__valve_ops_reply__get_packed_size
                     (const Talker__ValveOpsReply   *message);
size_t talker__valve_ops_reply__pack
                     (const Talker__ValveOpsReply   *message,
                      uint8_t             *out);
size_t talker__valve_ops_reply__pack_to_buffer
                     (const Talker__ValveOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__ValveOpsReply *
       talker__valve_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__valve_ops_reply__free_unpacked
                     (Talker__ValveOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__NetworksOpsReply methods */
void   talker__networks_ops_reply__init
                     (Talker__NetworksOpsReply         *message);
size_t talker__networks_ops_reply__get_packed_size
                     (const Talker__NetworksOpsReply   *message);
size_t talker__networks_ops_reply__pack
                     (const Talker__NetworksOpsReply   *message,
                      uint8_t             *out);
size_t talker__networks_ops_reply__pack_to_buffer
                     (const Talker__NetworksOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__NetworksOpsReply *
       talker__networks_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__networks_ops_reply__free_unpacked
                     (Talker__NetworksOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmwafOpsReply methods */
void   talker__vmwaf_ops_reply__init
                     (Talker__VmwafOpsReply         *message);
size_t talker__vmwaf_ops_reply__get_packed_size
                     (const Talker__VmwafOpsReply   *message);
size_t talker__vmwaf_ops_reply__pack
                     (const Talker__VmwafOpsReply   *message,
                      uint8_t             *out);
size_t talker__vmwaf_ops_reply__pack_to_buffer
                     (const Talker__VmwafOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmwafOpsReply *
       talker__vmwaf_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vmwaf_ops_reply__free_unpacked
                     (Talker__VmwafOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__Vl2AddReq methods */
void   talker__vl2_add_req__init
                     (Talker__Vl2AddReq         *message);
size_t talker__vl2_add_req__get_packed_size
                     (const Talker__Vl2AddReq   *message);
size_t talker__vl2_add_req__pack
                     (const Talker__Vl2AddReq   *message,
                      uint8_t             *out);
size_t talker__vl2_add_req__pack_to_buffer
                     (const Talker__Vl2AddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__Vl2AddReq *
       talker__vl2_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vl2_add_req__free_unpacked
                     (Talker__Vl2AddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__Vl2DelReq methods */
void   talker__vl2_del_req__init
                     (Talker__Vl2DelReq         *message);
size_t talker__vl2_del_req__get_packed_size
                     (const Talker__Vl2DelReq   *message);
size_t talker__vl2_del_req__pack
                     (const Talker__Vl2DelReq   *message,
                      uint8_t             *out);
size_t talker__vl2_del_req__pack_to_buffer
                     (const Talker__Vl2DelReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__Vl2DelReq *
       talker__vl2_del_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vl2_del_req__free_unpacked
                     (Talker__Vl2DelReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__Vl2ModifyReq methods */
void   talker__vl2_modify_req__init
                     (Talker__Vl2ModifyReq         *message);
size_t talker__vl2_modify_req__get_packed_size
                     (const Talker__Vl2ModifyReq   *message);
size_t talker__vl2_modify_req__pack
                     (const Talker__Vl2ModifyReq   *message,
                      uint8_t             *out);
size_t talker__vl2_modify_req__pack_to_buffer
                     (const Talker__Vl2ModifyReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__Vl2ModifyReq *
       talker__vl2_modify_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vl2_modify_req__free_unpacked
                     (Talker__Vl2ModifyReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmAddReq methods */
void   talker__vm_add_req__init
                     (Talker__VmAddReq         *message);
size_t talker__vm_add_req__get_packed_size
                     (const Talker__VmAddReq   *message);
size_t talker__vm_add_req__pack
                     (const Talker__VmAddReq   *message,
                      uint8_t             *out);
size_t talker__vm_add_req__pack_to_buffer
                     (const Talker__VmAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmAddReq *
       talker__vm_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_add_req__free_unpacked
                     (Talker__VmAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmReplaceReq methods */
void   talker__vm_replace_req__init
                     (Talker__VmReplaceReq         *message);
size_t talker__vm_replace_req__get_packed_size
                     (const Talker__VmReplaceReq   *message);
size_t talker__vm_replace_req__pack
                     (const Talker__VmReplaceReq   *message,
                      uint8_t             *out);
size_t talker__vm_replace_req__pack_to_buffer
                     (const Talker__VmReplaceReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmReplaceReq *
       talker__vm_replace_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_replace_req__free_unpacked
                     (Talker__VmReplaceReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmDeleteReq methods */
void   talker__vm_delete_req__init
                     (Talker__VmDeleteReq         *message);
size_t talker__vm_delete_req__get_packed_size
                     (const Talker__VmDeleteReq   *message);
size_t talker__vm_delete_req__pack
                     (const Talker__VmDeleteReq   *message,
                      uint8_t             *out);
size_t talker__vm_delete_req__pack_to_buffer
                     (const Talker__VmDeleteReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmDeleteReq *
       talker__vm_delete_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_delete_req__free_unpacked
                     (Talker__VmDeleteReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmStartReq methods */
void   talker__vm_start_req__init
                     (Talker__VmStartReq         *message);
size_t talker__vm_start_req__get_packed_size
                     (const Talker__VmStartReq   *message);
size_t talker__vm_start_req__pack
                     (const Talker__VmStartReq   *message,
                      uint8_t             *out);
size_t talker__vm_start_req__pack_to_buffer
                     (const Talker__VmStartReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmStartReq *
       talker__vm_start_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_start_req__free_unpacked
                     (Talker__VmStartReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmStopReq methods */
void   talker__vm_stop_req__init
                     (Talker__VmStopReq         *message);
size_t talker__vm_stop_req__get_packed_size
                     (const Talker__VmStopReq   *message);
size_t talker__vm_stop_req__pack
                     (const Talker__VmStopReq   *message,
                      uint8_t             *out);
size_t talker__vm_stop_req__pack_to_buffer
                     (const Talker__VmStopReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmStopReq *
       talker__vm_stop_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_stop_req__free_unpacked
                     (Talker__VmStopReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmModifyReq methods */
void   talker__vm_modify_req__init
                     (Talker__VmModifyReq         *message);
size_t talker__vm_modify_req__get_packed_size
                     (const Talker__VmModifyReq   *message);
size_t talker__vm_modify_req__pack
                     (const Talker__VmModifyReq   *message,
                      uint8_t             *out);
size_t talker__vm_modify_req__pack_to_buffer
                     (const Talker__VmModifyReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmModifyReq *
       talker__vm_modify_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_modify_req__free_unpacked
                     (Talker__VmModifyReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__TorswitchModifyReq methods */
void   talker__torswitch_modify_req__init
                     (Talker__TorswitchModifyReq         *message);
size_t talker__torswitch_modify_req__get_packed_size
                     (const Talker__TorswitchModifyReq   *message);
size_t talker__torswitch_modify_req__pack
                     (const Talker__TorswitchModifyReq   *message,
                      uint8_t             *out);
size_t talker__torswitch_modify_req__pack_to_buffer
                     (const Talker__TorswitchModifyReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__TorswitchModifyReq *
       talker__torswitch_modify_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__torswitch_modify_req__free_unpacked
                     (Talker__TorswitchModifyReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmIsolateReq methods */
void   talker__vm_isolate_req__init
                     (Talker__VmIsolateReq         *message);
size_t talker__vm_isolate_req__get_packed_size
                     (const Talker__VmIsolateReq   *message);
size_t talker__vm_isolate_req__pack
                     (const Talker__VmIsolateReq   *message,
                      uint8_t             *out);
size_t talker__vm_isolate_req__pack_to_buffer
                     (const Talker__VmIsolateReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmIsolateReq *
       talker__vm_isolate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_isolate_req__free_unpacked
                     (Talker__VmIsolateReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmReleaseReq methods */
void   talker__vm_release_req__init
                     (Talker__VmReleaseReq         *message);
size_t talker__vm_release_req__get_packed_size
                     (const Talker__VmReleaseReq   *message);
size_t talker__vm_release_req__pack
                     (const Talker__VmReleaseReq   *message,
                      uint8_t             *out);
size_t talker__vm_release_req__pack_to_buffer
                     (const Talker__VmReleaseReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmReleaseReq *
       talker__vm_release_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_release_req__free_unpacked
                     (Talker__VmReleaseReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmCreateSnapshotReq methods */
void   talker__vm_create_snapshot_req__init
                     (Talker__VmCreateSnapshotReq         *message);
size_t talker__vm_create_snapshot_req__get_packed_size
                     (const Talker__VmCreateSnapshotReq   *message);
size_t talker__vm_create_snapshot_req__pack
                     (const Talker__VmCreateSnapshotReq   *message,
                      uint8_t             *out);
size_t talker__vm_create_snapshot_req__pack_to_buffer
                     (const Talker__VmCreateSnapshotReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmCreateSnapshotReq *
       talker__vm_create_snapshot_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_create_snapshot_req__free_unpacked
                     (Talker__VmCreateSnapshotReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmRevertSnapshotReq methods */
void   talker__vm_revert_snapshot_req__init
                     (Talker__VmRevertSnapshotReq         *message);
size_t talker__vm_revert_snapshot_req__get_packed_size
                     (const Talker__VmRevertSnapshotReq   *message);
size_t talker__vm_revert_snapshot_req__pack
                     (const Talker__VmRevertSnapshotReq   *message,
                      uint8_t             *out);
size_t talker__vm_revert_snapshot_req__pack_to_buffer
                     (const Talker__VmRevertSnapshotReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmRevertSnapshotReq *
       talker__vm_revert_snapshot_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_revert_snapshot_req__free_unpacked
                     (Talker__VmRevertSnapshotReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmDeleteSnapshotReq methods */
void   talker__vm_delete_snapshot_req__init
                     (Talker__VmDeleteSnapshotReq         *message);
size_t talker__vm_delete_snapshot_req__get_packed_size
                     (const Talker__VmDeleteSnapshotReq   *message);
size_t talker__vm_delete_snapshot_req__pack
                     (const Talker__VmDeleteSnapshotReq   *message,
                      uint8_t             *out);
size_t talker__vm_delete_snapshot_req__pack_to_buffer
                     (const Talker__VmDeleteSnapshotReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmDeleteSnapshotReq *
       talker__vm_delete_snapshot_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_delete_snapshot_req__free_unpacked
                     (Talker__VmDeleteSnapshotReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__ThirdVmAddReq methods */
void   talker__third_vm_add_req__init
                     (Talker__ThirdVmAddReq         *message);
size_t talker__third_vm_add_req__get_packed_size
                     (const Talker__ThirdVmAddReq   *message);
size_t talker__third_vm_add_req__pack
                     (const Talker__ThirdVmAddReq   *message,
                      uint8_t             *out);
size_t talker__third_vm_add_req__pack_to_buffer
                     (const Talker__ThirdVmAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__ThirdVmAddReq *
       talker__third_vm_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__third_vm_add_req__free_unpacked
                     (Talker__ThirdVmAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmMigrateReq methods */
void   talker__vm_migrate_req__init
                     (Talker__VmMigrateReq         *message);
size_t talker__vm_migrate_req__get_packed_size
                     (const Talker__VmMigrateReq   *message);
size_t talker__vm_migrate_req__pack
                     (const Talker__VmMigrateReq   *message,
                      uint8_t             *out);
size_t talker__vm_migrate_req__pack_to_buffer
                     (const Talker__VmMigrateReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmMigrateReq *
       talker__vm_migrate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vm_migrate_req__free_unpacked
                     (Talker__VmMigrateReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__NotifyProactive methods */
void   talker__notify_proactive__init
                     (Talker__NotifyProactive         *message);
size_t talker__notify_proactive__get_packed_size
                     (const Talker__NotifyProactive   *message);
size_t talker__notify_proactive__pack
                     (const Talker__NotifyProactive   *message,
                      uint8_t             *out);
size_t talker__notify_proactive__pack_to_buffer
                     (const Talker__NotifyProactive   *message,
                      ProtobufCBuffer     *buffer);
Talker__NotifyProactive *
       talker__notify_proactive__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__notify_proactive__free_unpacked
                     (Talker__NotifyProactive *message,
                      ProtobufCAllocator *allocator);
/* Talker__NotifyBundleProactive methods */
void   talker__notify_bundle_proactive__init
                     (Talker__NotifyBundleProactive         *message);
size_t talker__notify_bundle_proactive__get_packed_size
                     (const Talker__NotifyBundleProactive   *message);
size_t talker__notify_bundle_proactive__pack
                     (const Talker__NotifyBundleProactive   *message,
                      uint8_t             *out);
size_t talker__notify_bundle_proactive__pack_to_buffer
                     (const Talker__NotifyBundleProactive   *message,
                      ProtobufCBuffer     *buffer);
Talker__NotifyBundleProactive *
       talker__notify_bundle_proactive__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__notify_bundle_proactive__free_unpacked
                     (Talker__NotifyBundleProactive *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgwAddReq methods */
void   talker__vgw_add_req__init
                     (Talker__VgwAddReq         *message);
size_t talker__vgw_add_req__get_packed_size
                     (const Talker__VgwAddReq   *message);
size_t talker__vgw_add_req__pack
                     (const Talker__VgwAddReq   *message,
                      uint8_t             *out);
size_t talker__vgw_add_req__pack_to_buffer
                     (const Talker__VgwAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgwAddReq *
       talker__vgw_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgw_add_req__free_unpacked
                     (Talker__VgwAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgatewayAddReq methods */
void   talker__vgateway_add_req__init
                     (Talker__VgatewayAddReq         *message);
size_t talker__vgateway_add_req__get_packed_size
                     (const Talker__VgatewayAddReq   *message);
size_t talker__vgateway_add_req__pack
                     (const Talker__VgatewayAddReq   *message,
                      uint8_t             *out);
size_t talker__vgateway_add_req__pack_to_buffer
                     (const Talker__VgatewayAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgatewayAddReq *
       talker__vgateway_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgateway_add_req__free_unpacked
                     (Talker__VgatewayAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__ValveAddReq methods */
void   talker__valve_add_req__init
                     (Talker__ValveAddReq         *message);
size_t talker__valve_add_req__get_packed_size
                     (const Talker__ValveAddReq   *message);
size_t talker__valve_add_req__pack
                     (const Talker__ValveAddReq   *message,
                      uint8_t             *out);
size_t talker__valve_add_req__pack_to_buffer
                     (const Talker__ValveAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__ValveAddReq *
       talker__valve_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__valve_add_req__free_unpacked
                     (Talker__ValveAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgwStartReq methods */
void   talker__vgw_start_req__init
                     (Talker__VgwStartReq         *message);
size_t talker__vgw_start_req__get_packed_size
                     (const Talker__VgwStartReq   *message);
size_t talker__vgw_start_req__pack
                     (const Talker__VgwStartReq   *message,
                      uint8_t             *out);
size_t talker__vgw_start_req__pack_to_buffer
                     (const Talker__VgwStartReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgwStartReq *
       talker__vgw_start_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgw_start_req__free_unpacked
                     (Talker__VgwStartReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgwStopReq methods */
void   talker__vgw_stop_req__init
                     (Talker__VgwStopReq         *message);
size_t talker__vgw_stop_req__get_packed_size
                     (const Talker__VgwStopReq   *message);
size_t talker__vgw_stop_req__pack
                     (const Talker__VgwStopReq   *message,
                      uint8_t             *out);
size_t talker__vgw_stop_req__pack_to_buffer
                     (const Talker__VgwStopReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgwStopReq *
       talker__vgw_stop_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgw_stop_req__free_unpacked
                     (Talker__VgwStopReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgwModifyReq methods */
void   talker__vgw_modify_req__init
                     (Talker__VgwModifyReq         *message);
size_t talker__vgw_modify_req__get_packed_size
                     (const Talker__VgwModifyReq   *message);
size_t talker__vgw_modify_req__pack
                     (const Talker__VgwModifyReq   *message,
                      uint8_t             *out);
size_t talker__vgw_modify_req__pack_to_buffer
                     (const Talker__VgwModifyReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgwModifyReq *
       talker__vgw_modify_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgw_modify_req__free_unpacked
                     (Talker__VgwModifyReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgatewayModifyReq methods */
void   talker__vgateway_modify_req__init
                     (Talker__VgatewayModifyReq         *message);
size_t talker__vgateway_modify_req__get_packed_size
                     (const Talker__VgatewayModifyReq   *message);
size_t talker__vgateway_modify_req__pack
                     (const Talker__VgatewayModifyReq   *message,
                      uint8_t             *out);
size_t talker__vgateway_modify_req__pack_to_buffer
                     (const Talker__VgatewayModifyReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgatewayModifyReq *
       talker__vgateway_modify_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgateway_modify_req__free_unpacked
                     (Talker__VgatewayModifyReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgatewayMigrateReq methods */
void   talker__vgateway_migrate_req__init
                     (Talker__VgatewayMigrateReq         *message);
size_t talker__vgateway_migrate_req__get_packed_size
                     (const Talker__VgatewayMigrateReq   *message);
size_t talker__vgateway_migrate_req__pack
                     (const Talker__VgatewayMigrateReq   *message,
                      uint8_t             *out);
size_t talker__vgateway_migrate_req__pack_to_buffer
                     (const Talker__VgatewayMigrateReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgatewayMigrateReq *
       talker__vgateway_migrate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgateway_migrate_req__free_unpacked
                     (Talker__VgatewayMigrateReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__ValveModifyReq methods */
void   talker__valve_modify_req__init
                     (Talker__ValveModifyReq         *message);
size_t talker__valve_modify_req__get_packed_size
                     (const Talker__ValveModifyReq   *message);
size_t talker__valve_modify_req__pack
                     (const Talker__ValveModifyReq   *message,
                      uint8_t             *out);
size_t talker__valve_modify_req__pack_to_buffer
                     (const Talker__ValveModifyReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__ValveModifyReq *
       talker__valve_modify_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__valve_modify_req__free_unpacked
                     (Talker__ValveModifyReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__ValveMigrateReq methods */
void   talker__valve_migrate_req__init
                     (Talker__ValveMigrateReq         *message);
size_t talker__valve_migrate_req__get_packed_size
                     (const Talker__ValveMigrateReq   *message);
size_t talker__valve_migrate_req__pack
                     (const Talker__ValveMigrateReq   *message,
                      uint8_t             *out);
size_t talker__valve_migrate_req__pack_to_buffer
                     (const Talker__ValveMigrateReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__ValveMigrateReq *
       talker__valve_migrate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__valve_migrate_req__free_unpacked
                     (Talker__ValveMigrateReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgwDelReq methods */
void   talker__vgw_del_req__init
                     (Talker__VgwDelReq         *message);
size_t talker__vgw_del_req__get_packed_size
                     (const Talker__VgwDelReq   *message);
size_t talker__vgw_del_req__pack
                     (const Talker__VgwDelReq   *message,
                      uint8_t             *out);
size_t talker__vgw_del_req__pack_to_buffer
                     (const Talker__VgwDelReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgwDelReq *
       talker__vgw_del_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgw_del_req__free_unpacked
                     (Talker__VgwDelReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgatewayDelReq methods */
void   talker__vgateway_del_req__init
                     (Talker__VgatewayDelReq         *message);
size_t talker__vgateway_del_req__get_packed_size
                     (const Talker__VgatewayDelReq   *message);
size_t talker__vgateway_del_req__pack
                     (const Talker__VgatewayDelReq   *message,
                      uint8_t             *out);
size_t talker__vgateway_del_req__pack_to_buffer
                     (const Talker__VgatewayDelReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgatewayDelReq *
       talker__vgateway_del_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgateway_del_req__free_unpacked
                     (Talker__VgatewayDelReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__ValveDelReq methods */
void   talker__valve_del_req__init
                     (Talker__ValveDelReq         *message);
size_t talker__valve_del_req__get_packed_size
                     (const Talker__ValveDelReq   *message);
size_t talker__valve_del_req__pack
                     (const Talker__ValveDelReq   *message,
                      uint8_t             *out);
size_t talker__valve_del_req__pack_to_buffer
                     (const Talker__ValveDelReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__ValveDelReq *
       talker__valve_del_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__valve_del_req__free_unpacked
                     (Talker__ValveDelReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgwSwitchOpt methods */
void   talker__vgw_switch_opt__init
                     (Talker__VgwSwitchOpt         *message);
size_t talker__vgw_switch_opt__get_packed_size
                     (const Talker__VgwSwitchOpt   *message);
size_t talker__vgw_switch_opt__pack
                     (const Talker__VgwSwitchOpt   *message,
                      uint8_t             *out);
size_t talker__vgw_switch_opt__pack_to_buffer
                     (const Talker__VgwSwitchOpt   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgwSwitchOpt *
       talker__vgw_switch_opt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgw_switch_opt__free_unpacked
                     (Talker__VgwSwitchOpt *message,
                      ProtobufCAllocator *allocator);
/* Talker__VgwSwitchReq methods */
void   talker__vgw_switch_req__init
                     (Talker__VgwSwitchReq         *message);
size_t talker__vgw_switch_req__get_packed_size
                     (const Talker__VgwSwitchReq   *message);
size_t talker__vgw_switch_req__pack
                     (const Talker__VgwSwitchReq   *message,
                      uint8_t             *out);
size_t talker__vgw_switch_req__pack_to_buffer
                     (const Talker__VgwSwitchReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VgwSwitchReq *
       talker__vgw_switch_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vgw_switch_req__free_unpacked
                     (Talker__VgwSwitchReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__ThirdVgwAddReq methods */
void   talker__third_vgw_add_req__init
                     (Talker__ThirdVgwAddReq         *message);
size_t talker__third_vgw_add_req__get_packed_size
                     (const Talker__ThirdVgwAddReq   *message);
size_t talker__third_vgw_add_req__pack
                     (const Talker__ThirdVgwAddReq   *message,
                      uint8_t             *out);
size_t talker__third_vgw_add_req__pack_to_buffer
                     (const Talker__ThirdVgwAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__ThirdVgwAddReq *
       talker__third_vgw_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__third_vgw_add_req__free_unpacked
                     (Talker__ThirdVgwAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__TunnelQos methods */
void   talker__tunnel_qos__init
                     (Talker__TunnelQos         *message);
size_t talker__tunnel_qos__get_packed_size
                     (const Talker__TunnelQos   *message);
size_t talker__tunnel_qos__pack
                     (const Talker__TunnelQos   *message,
                      uint8_t             *out);
size_t talker__tunnel_qos__pack_to_buffer
                     (const Talker__TunnelQos   *message,
                      ProtobufCBuffer     *buffer);
Talker__TunnelQos *
       talker__tunnel_qos__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__tunnel_qos__free_unpacked
                     (Talker__TunnelQos *message,
                      ProtobufCAllocator *allocator);
/* Talker__Gre methods */
void   talker__gre__init
                     (Talker__Gre         *message);
size_t talker__gre__get_packed_size
                     (const Talker__Gre   *message);
size_t talker__gre__pack
                     (const Talker__Gre   *message,
                      uint8_t             *out);
size_t talker__gre__pack_to_buffer
                     (const Talker__Gre   *message,
                      ProtobufCBuffer     *buffer);
Talker__Gre *
       talker__gre__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__gre__free_unpacked
                     (Talker__Gre *message,
                      ProtobufCAllocator *allocator);
/* Talker__VMWafAddReq methods */
void   talker__vmwaf_add_req__init
                     (Talker__VMWafAddReq         *message);
size_t talker__vmwaf_add_req__get_packed_size
                     (const Talker__VMWafAddReq   *message);
size_t talker__vmwaf_add_req__pack
                     (const Talker__VMWafAddReq   *message,
                      uint8_t             *out);
size_t talker__vmwaf_add_req__pack_to_buffer
                     (const Talker__VMWafAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VMWafAddReq *
       talker__vmwaf_add_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vmwaf_add_req__free_unpacked
                     (Talker__VMWafAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VMWafDelReq methods */
void   talker__vmwaf_del_req__init
                     (Talker__VMWafDelReq         *message);
size_t talker__vmwaf_del_req__get_packed_size
                     (const Talker__VMWafDelReq   *message);
size_t talker__vmwaf_del_req__pack
                     (const Talker__VMWafDelReq   *message,
                      uint8_t             *out);
size_t talker__vmwaf_del_req__pack_to_buffer
                     (const Talker__VMWafDelReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VMWafDelReq *
       talker__vmwaf_del_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vmwaf_del_req__free_unpacked
                     (Talker__VMWafDelReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__SouthReq methods */
void   talker__south_req__init
                     (Talker__SouthReq         *message);
size_t talker__south_req__get_packed_size
                     (const Talker__SouthReq   *message);
size_t talker__south_req__pack
                     (const Talker__SouthReq   *message,
                      uint8_t             *out);
size_t talker__south_req__pack_to_buffer
                     (const Talker__SouthReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__SouthReq *
       talker__south_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__south_req__free_unpacked
                     (Talker__SouthReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__SouthReply methods */
void   talker__south_reply__init
                     (Talker__SouthReply         *message);
size_t talker__south_reply__get_packed_size
                     (const Talker__SouthReply   *message);
size_t talker__south_reply__pack
                     (const Talker__SouthReply   *message,
                      uint8_t             *out);
size_t talker__south_reply__pack_to_buffer
                     (const Talker__SouthReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__SouthReply *
       talker__south_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__south_reply__free_unpacked
                     (Talker__SouthReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__HadiskOpsReq methods */
void   talker__hadisk_ops_req__init
                     (Talker__HadiskOpsReq         *message);
size_t talker__hadisk_ops_req__get_packed_size
                     (const Talker__HadiskOpsReq   *message);
size_t talker__hadisk_ops_req__pack
                     (const Talker__HadiskOpsReq   *message,
                      uint8_t             *out);
size_t talker__hadisk_ops_req__pack_to_buffer
                     (const Talker__HadiskOpsReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__HadiskOpsReq *
       talker__hadisk_ops_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__hadisk_ops_req__free_unpacked
                     (Talker__HadiskOpsReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__HWDevInterfaceAttachReq methods */
void   talker__hwdev_interface_attach_req__init
                     (Talker__HWDevInterfaceAttachReq         *message);
size_t talker__hwdev_interface_attach_req__get_packed_size
                     (const Talker__HWDevInterfaceAttachReq   *message);
size_t talker__hwdev_interface_attach_req__pack
                     (const Talker__HWDevInterfaceAttachReq   *message,
                      uint8_t             *out);
size_t talker__hwdev_interface_attach_req__pack_to_buffer
                     (const Talker__HWDevInterfaceAttachReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__HWDevInterfaceAttachReq *
       talker__hwdev_interface_attach_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__hwdev_interface_attach_req__free_unpacked
                     (Talker__HWDevInterfaceAttachReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__HWDevInterfaceDetachReq methods */
void   talker__hwdev_interface_detach_req__init
                     (Talker__HWDevInterfaceDetachReq         *message);
size_t talker__hwdev_interface_detach_req__get_packed_size
                     (const Talker__HWDevInterfaceDetachReq   *message);
size_t talker__hwdev_interface_detach_req__pack
                     (const Talker__HWDevInterfaceDetachReq   *message,
                      uint8_t             *out);
size_t talker__hwdev_interface_detach_req__pack_to_buffer
                     (const Talker__HWDevInterfaceDetachReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__HWDevInterfaceDetachReq *
       talker__hwdev_interface_detach_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__hwdev_interface_detach_req__free_unpacked
                     (Talker__HWDevInterfaceDetachReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__HWDevOpsReply methods */
void   talker__hwdev_ops_reply__init
                     (Talker__HWDevOpsReply         *message);
size_t talker__hwdev_ops_reply__get_packed_size
                     (const Talker__HWDevOpsReply   *message);
size_t talker__hwdev_ops_reply__pack
                     (const Talker__HWDevOpsReply   *message,
                      uint8_t             *out);
size_t talker__hwdev_ops_reply__pack_to_buffer
                     (const Talker__HWDevOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__HWDevOpsReply *
       talker__hwdev_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__hwdev_ops_reply__free_unpacked
                     (Talker__HWDevOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__InterfaceAttachReq methods */
void   talker__interface_attach_req__init
                     (Talker__InterfaceAttachReq         *message);
size_t talker__interface_attach_req__get_packed_size
                     (const Talker__InterfaceAttachReq   *message);
size_t talker__interface_attach_req__pack
                     (const Talker__InterfaceAttachReq   *message,
                      uint8_t             *out);
size_t talker__interface_attach_req__pack_to_buffer
                     (const Talker__InterfaceAttachReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__InterfaceAttachReq *
       talker__interface_attach_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__interface_attach_req__free_unpacked
                     (Talker__InterfaceAttachReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__InterfaceDetachReq methods */
void   talker__interface_detach_req__init
                     (Talker__InterfaceDetachReq         *message);
size_t talker__interface_detach_req__get_packed_size
                     (const Talker__InterfaceDetachReq   *message);
size_t talker__interface_detach_req__pack
                     (const Talker__InterfaceDetachReq   *message,
                      uint8_t             *out);
size_t talker__interface_detach_req__pack_to_buffer
                     (const Talker__InterfaceDetachReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__InterfaceDetachReq *
       talker__interface_detach_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__interface_detach_req__free_unpacked
                     (Talker__InterfaceDetachReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__InterfacesConfigReq methods */
void   talker__interfaces_config_req__init
                     (Talker__InterfacesConfigReq         *message);
size_t talker__interfaces_config_req__get_packed_size
                     (const Talker__InterfacesConfigReq   *message);
size_t talker__interfaces_config_req__pack
                     (const Talker__InterfacesConfigReq   *message,
                      uint8_t             *out);
size_t talker__interfaces_config_req__pack_to_buffer
                     (const Talker__InterfacesConfigReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__InterfacesConfigReq *
       talker__interfaces_config_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__interfaces_config_req__free_unpacked
                     (Talker__InterfacesConfigReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__InterfacesOpsReply methods */
void   talker__interfaces_ops_reply__init
                     (Talker__InterfacesOpsReply         *message);
size_t talker__interfaces_ops_reply__get_packed_size
                     (const Talker__InterfacesOpsReply   *message);
size_t talker__interfaces_ops_reply__pack
                     (const Talker__InterfacesOpsReply   *message,
                      uint8_t             *out);
size_t talker__interfaces_ops_reply__pack_to_buffer
                     (const Talker__InterfacesOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__InterfacesOpsReply *
       talker__interfaces_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__interfaces_ops_reply__free_unpacked
                     (Talker__InterfacesOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__PMAddReq methods */
void   talker__pmadd_req__init
                     (Talker__PMAddReq         *message);
size_t talker__pmadd_req__get_packed_size
                     (const Talker__PMAddReq   *message);
size_t talker__pmadd_req__pack
                     (const Talker__PMAddReq   *message,
                      uint8_t             *out);
size_t talker__pmadd_req__pack_to_buffer
                     (const Talker__PMAddReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__PMAddReq *
       talker__pmadd_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__pmadd_req__free_unpacked
                     (Talker__PMAddReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__PMOpsReq methods */
void   talker__pmops_req__init
                     (Talker__PMOpsReq         *message);
size_t talker__pmops_req__get_packed_size
                     (const Talker__PMOpsReq   *message);
size_t talker__pmops_req__pack
                     (const Talker__PMOpsReq   *message,
                      uint8_t             *out);
size_t talker__pmops_req__pack_to_buffer
                     (const Talker__PMOpsReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__PMOpsReq *
       talker__pmops_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__pmops_req__free_unpacked
                     (Talker__PMOpsReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__PMNic methods */
void   talker__pmnic__init
                     (Talker__PMNic         *message);
size_t talker__pmnic__get_packed_size
                     (const Talker__PMNic   *message);
size_t talker__pmnic__pack
                     (const Talker__PMNic   *message,
                      uint8_t             *out);
size_t talker__pmnic__pack_to_buffer
                     (const Talker__PMNic   *message,
                      ProtobufCBuffer     *buffer);
Talker__PMNic *
       talker__pmnic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__pmnic__free_unpacked
                     (Talker__PMNic *message,
                      ProtobufCAllocator *allocator);
/* Talker__PMDeployReq methods */
void   talker__pmdeploy_req__init
                     (Talker__PMDeployReq         *message);
size_t talker__pmdeploy_req__get_packed_size
                     (const Talker__PMDeployReq   *message);
size_t talker__pmdeploy_req__pack
                     (const Talker__PMDeployReq   *message,
                      uint8_t             *out);
size_t talker__pmdeploy_req__pack_to_buffer
                     (const Talker__PMDeployReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__PMDeployReq *
       talker__pmdeploy_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__pmdeploy_req__free_unpacked
                     (Talker__PMDeployReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__PMOpsReply methods */
void   talker__pmops_reply__init
                     (Talker__PMOpsReply         *message);
size_t talker__pmops_reply__get_packed_size
                     (const Talker__PMOpsReply   *message);
size_t talker__pmops_reply__pack
                     (const Talker__PMOpsReply   *message,
                      uint8_t             *out);
size_t talker__pmops_reply__pack_to_buffer
                     (const Talker__PMOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__PMOpsReply *
       talker__pmops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__pmops_reply__free_unpacked
                     (Talker__PMOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__HostBootReq methods */
void   talker__host_boot_req__init
                     (Talker__HostBootReq         *message);
size_t talker__host_boot_req__get_packed_size
                     (const Talker__HostBootReq   *message);
size_t talker__host_boot_req__pack
                     (const Talker__HostBootReq   *message,
                      uint8_t             *out);
size_t talker__host_boot_req__pack_to_buffer
                     (const Talker__HostBootReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__HostBootReq *
       talker__host_boot_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__host_boot_req__free_unpacked
                     (Talker__HostBootReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__HostOpsReply methods */
void   talker__host_ops_reply__init
                     (Talker__HostOpsReply         *message);
size_t talker__host_ops_reply__get_packed_size
                     (const Talker__HostOpsReply   *message);
size_t talker__host_ops_reply__pack
                     (const Talker__HostOpsReply   *message,
                      uint8_t             *out);
size_t talker__host_ops_reply__pack_to_buffer
                     (const Talker__HostOpsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__HostOpsReply *
       talker__host_ops_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__host_ops_reply__free_unpacked
                     (Talker__HostOpsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__ChargeStatsReq methods */
void   talker__charge_stats_req__init
                     (Talker__ChargeStatsReq         *message);
size_t talker__charge_stats_req__get_packed_size
                     (const Talker__ChargeStatsReq   *message);
size_t talker__charge_stats_req__pack
                     (const Talker__ChargeStatsReq   *message,
                      uint8_t             *out);
size_t talker__charge_stats_req__pack_to_buffer
                     (const Talker__ChargeStatsReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__ChargeStatsReq *
       talker__charge_stats_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__charge_stats_req__free_unpacked
                     (Talker__ChargeStatsReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__OrderChargeReq methods */
void   talker__order_charge_req__init
                     (Talker__OrderChargeReq         *message);
size_t talker__order_charge_req__get_packed_size
                     (const Talker__OrderChargeReq   *message);
size_t talker__order_charge_req__pack
                     (const Talker__OrderChargeReq   *message,
                      uint8_t             *out);
size_t talker__order_charge_req__pack_to_buffer
                     (const Talker__OrderChargeReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__OrderChargeReq *
       talker__order_charge_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__order_charge_req__free_unpacked
                     (Talker__OrderChargeReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__OrderChargeVM methods */
void   talker__order_charge_vm__init
                     (Talker__OrderChargeVM         *message);
size_t talker__order_charge_vm__get_packed_size
                     (const Talker__OrderChargeVM   *message);
size_t talker__order_charge_vm__pack
                     (const Talker__OrderChargeVM   *message,
                      uint8_t             *out);
size_t talker__order_charge_vm__pack_to_buffer
                     (const Talker__OrderChargeVM   *message,
                      ProtobufCBuffer     *buffer);
Talker__OrderChargeVM *
       talker__order_charge_vm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__order_charge_vm__free_unpacked
                     (Talker__OrderChargeVM *message,
                      ProtobufCAllocator *allocator);
/* Talker__OrderChargeVGW methods */
void   talker__order_charge_vgw__init
                     (Talker__OrderChargeVGW         *message);
size_t talker__order_charge_vgw__get_packed_size
                     (const Talker__OrderChargeVGW   *message);
size_t talker__order_charge_vgw__pack
                     (const Talker__OrderChargeVGW   *message,
                      uint8_t             *out);
size_t talker__order_charge_vgw__pack_to_buffer
                     (const Talker__OrderChargeVGW   *message,
                      ProtobufCBuffer     *buffer);
Talker__OrderChargeVGW *
       talker__order_charge_vgw__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__order_charge_vgw__free_unpacked
                     (Talker__OrderChargeVGW *message,
                      ProtobufCAllocator *allocator);
/* Talker__OrderChargeISP methods */
void   talker__order_charge_isp__init
                     (Talker__OrderChargeISP         *message);
size_t talker__order_charge_isp__get_packed_size
                     (const Talker__OrderChargeISP   *message);
size_t talker__order_charge_isp__pack
                     (const Talker__OrderChargeISP   *message,
                      uint8_t             *out);
size_t talker__order_charge_isp__pack_to_buffer
                     (const Talker__OrderChargeISP   *message,
                      ProtobufCBuffer     *buffer);
Talker__OrderChargeISP *
       talker__order_charge_isp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__order_charge_isp__free_unpacked
                     (Talker__OrderChargeISP *message,
                      ProtobufCAllocator *allocator);
/* Talker__OrderChargeBW methods */
void   talker__order_charge_bw__init
                     (Talker__OrderChargeBW         *message);
size_t talker__order_charge_bw__get_packed_size
                     (const Talker__OrderChargeBW   *message);
size_t talker__order_charge_bw__pack
                     (const Talker__OrderChargeBW   *message,
                      uint8_t             *out);
size_t talker__order_charge_bw__pack_to_buffer
                     (const Talker__OrderChargeBW   *message,
                      ProtobufCBuffer     *buffer);
Talker__OrderChargeBW *
       talker__order_charge_bw__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__order_charge_bw__free_unpacked
                     (Talker__OrderChargeBW *message,
                      ProtobufCAllocator *allocator);
/* Talker__ChargeStatsReply methods */
void   talker__charge_stats_reply__init
                     (Talker__ChargeStatsReply         *message);
size_t talker__charge_stats_reply__get_packed_size
                     (const Talker__ChargeStatsReply   *message);
size_t talker__charge_stats_reply__pack
                     (const Talker__ChargeStatsReply   *message,
                      uint8_t             *out);
size_t talker__charge_stats_reply__pack_to_buffer
                     (const Talker__ChargeStatsReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__ChargeStatsReply *
       talker__charge_stats_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__charge_stats_reply__free_unpacked
                     (Talker__ChargeStatsReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__OrderChargeReply methods */
void   talker__order_charge_reply__init
                     (Talker__OrderChargeReply         *message);
size_t talker__order_charge_reply__get_packed_size
                     (const Talker__OrderChargeReply   *message);
size_t talker__order_charge_reply__pack
                     (const Talker__OrderChargeReply   *message,
                      uint8_t             *out);
size_t talker__order_charge_reply__pack_to_buffer
                     (const Talker__OrderChargeReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__OrderChargeReply *
       talker__order_charge_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__order_charge_reply__free_unpacked
                     (Talker__OrderChargeReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmadapterVmLearnReq methods */
void   talker__vmadapter_vm_learn_req__init
                     (Talker__VmadapterVmLearnReq         *message);
size_t talker__vmadapter_vm_learn_req__get_packed_size
                     (const Talker__VmadapterVmLearnReq   *message);
size_t talker__vmadapter_vm_learn_req__pack
                     (const Talker__VmadapterVmLearnReq   *message,
                      uint8_t             *out);
size_t talker__vmadapter_vm_learn_req__pack_to_buffer
                     (const Talker__VmadapterVmLearnReq   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmadapterVmLearnReq *
       talker__vmadapter_vm_learn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vmadapter_vm_learn_req__free_unpacked
                     (Talker__VmadapterVmLearnReq *message,
                      ProtobufCAllocator *allocator);
/* Talker__VmadapterVmLearnReply methods */
void   talker__vmadapter_vm_learn_reply__init
                     (Talker__VmadapterVmLearnReply         *message);
size_t talker__vmadapter_vm_learn_reply__get_packed_size
                     (const Talker__VmadapterVmLearnReply   *message);
size_t talker__vmadapter_vm_learn_reply__pack
                     (const Talker__VmadapterVmLearnReply   *message,
                      uint8_t             *out);
size_t talker__vmadapter_vm_learn_reply__pack_to_buffer
                     (const Talker__VmadapterVmLearnReply   *message,
                      ProtobufCBuffer     *buffer);
Talker__VmadapterVmLearnReply *
       talker__vmadapter_vm_learn_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__vmadapter_vm_learn_reply__free_unpacked
                     (Talker__VmadapterVmLearnReply *message,
                      ProtobufCAllocator *allocator);
/* Talker__Message methods */
void   talker__message__init
                     (Talker__Message         *message);
size_t talker__message__get_packed_size
                     (const Talker__Message   *message);
size_t talker__message__pack
                     (const Talker__Message   *message,
                      uint8_t             *out);
size_t talker__message__pack_to_buffer
                     (const Talker__Message   *message,
                      ProtobufCBuffer     *buffer);
Talker__Message *
       talker__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   talker__message__free_unpacked
                     (Talker__Message *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Talker__VmOpsReply_Closure)
                 (const Talker__VmOpsReply *message,
                  void *closure_data);
typedef void (*Talker__VgatewayOpsReply_Closure)
                 (const Talker__VgatewayOpsReply *message,
                  void *closure_data);
typedef void (*Talker__ValveOpsReply_Closure)
                 (const Talker__ValveOpsReply *message,
                  void *closure_data);
typedef void (*Talker__NetworksOpsReply_Closure)
                 (const Talker__NetworksOpsReply *message,
                  void *closure_data);
typedef void (*Talker__VmwafOpsReply_Closure)
                 (const Talker__VmwafOpsReply *message,
                  void *closure_data);
typedef void (*Talker__Vl2AddReq_Closure)
                 (const Talker__Vl2AddReq *message,
                  void *closure_data);
typedef void (*Talker__Vl2DelReq_Closure)
                 (const Talker__Vl2DelReq *message,
                  void *closure_data);
typedef void (*Talker__Vl2ModifyReq_Closure)
                 (const Talker__Vl2ModifyReq *message,
                  void *closure_data);
typedef void (*Talker__VmAddReq_Closure)
                 (const Talker__VmAddReq *message,
                  void *closure_data);
typedef void (*Talker__VmReplaceReq_Closure)
                 (const Talker__VmReplaceReq *message,
                  void *closure_data);
typedef void (*Talker__VmDeleteReq_Closure)
                 (const Talker__VmDeleteReq *message,
                  void *closure_data);
typedef void (*Talker__VmStartReq_Closure)
                 (const Talker__VmStartReq *message,
                  void *closure_data);
typedef void (*Talker__VmStopReq_Closure)
                 (const Talker__VmStopReq *message,
                  void *closure_data);
typedef void (*Talker__VmModifyReq_Closure)
                 (const Talker__VmModifyReq *message,
                  void *closure_data);
typedef void (*Talker__TorswitchModifyReq_Closure)
                 (const Talker__TorswitchModifyReq *message,
                  void *closure_data);
typedef void (*Talker__VmIsolateReq_Closure)
                 (const Talker__VmIsolateReq *message,
                  void *closure_data);
typedef void (*Talker__VmReleaseReq_Closure)
                 (const Talker__VmReleaseReq *message,
                  void *closure_data);
typedef void (*Talker__VmCreateSnapshotReq_Closure)
                 (const Talker__VmCreateSnapshotReq *message,
                  void *closure_data);
typedef void (*Talker__VmRevertSnapshotReq_Closure)
                 (const Talker__VmRevertSnapshotReq *message,
                  void *closure_data);
typedef void (*Talker__VmDeleteSnapshotReq_Closure)
                 (const Talker__VmDeleteSnapshotReq *message,
                  void *closure_data);
typedef void (*Talker__ThirdVmAddReq_Closure)
                 (const Talker__ThirdVmAddReq *message,
                  void *closure_data);
typedef void (*Talker__VmMigrateReq_Closure)
                 (const Talker__VmMigrateReq *message,
                  void *closure_data);
typedef void (*Talker__NotifyProactive_Closure)
                 (const Talker__NotifyProactive *message,
                  void *closure_data);
typedef void (*Talker__NotifyBundleProactive_Closure)
                 (const Talker__NotifyBundleProactive *message,
                  void *closure_data);
typedef void (*Talker__VgwAddReq_Closure)
                 (const Talker__VgwAddReq *message,
                  void *closure_data);
typedef void (*Talker__VgatewayAddReq_Closure)
                 (const Talker__VgatewayAddReq *message,
                  void *closure_data);
typedef void (*Talker__ValveAddReq_Closure)
                 (const Talker__ValveAddReq *message,
                  void *closure_data);
typedef void (*Talker__VgwStartReq_Closure)
                 (const Talker__VgwStartReq *message,
                  void *closure_data);
typedef void (*Talker__VgwStopReq_Closure)
                 (const Talker__VgwStopReq *message,
                  void *closure_data);
typedef void (*Talker__VgwModifyReq_Closure)
                 (const Talker__VgwModifyReq *message,
                  void *closure_data);
typedef void (*Talker__VgatewayModifyReq_Closure)
                 (const Talker__VgatewayModifyReq *message,
                  void *closure_data);
typedef void (*Talker__VgatewayMigrateReq_Closure)
                 (const Talker__VgatewayMigrateReq *message,
                  void *closure_data);
typedef void (*Talker__ValveModifyReq_Closure)
                 (const Talker__ValveModifyReq *message,
                  void *closure_data);
typedef void (*Talker__ValveMigrateReq_Closure)
                 (const Talker__ValveMigrateReq *message,
                  void *closure_data);
typedef void (*Talker__VgwDelReq_Closure)
                 (const Talker__VgwDelReq *message,
                  void *closure_data);
typedef void (*Talker__VgatewayDelReq_Closure)
                 (const Talker__VgatewayDelReq *message,
                  void *closure_data);
typedef void (*Talker__ValveDelReq_Closure)
                 (const Talker__ValveDelReq *message,
                  void *closure_data);
typedef void (*Talker__VgwSwitchOpt_Closure)
                 (const Talker__VgwSwitchOpt *message,
                  void *closure_data);
typedef void (*Talker__VgwSwitchReq_Closure)
                 (const Talker__VgwSwitchReq *message,
                  void *closure_data);
typedef void (*Talker__ThirdVgwAddReq_Closure)
                 (const Talker__ThirdVgwAddReq *message,
                  void *closure_data);
typedef void (*Talker__TunnelQos_Closure)
                 (const Talker__TunnelQos *message,
                  void *closure_data);
typedef void (*Talker__Gre_Closure)
                 (const Talker__Gre *message,
                  void *closure_data);
typedef void (*Talker__VMWafAddReq_Closure)
                 (const Talker__VMWafAddReq *message,
                  void *closure_data);
typedef void (*Talker__VMWafDelReq_Closure)
                 (const Talker__VMWafDelReq *message,
                  void *closure_data);
typedef void (*Talker__SouthReq_Closure)
                 (const Talker__SouthReq *message,
                  void *closure_data);
typedef void (*Talker__SouthReply_Closure)
                 (const Talker__SouthReply *message,
                  void *closure_data);
typedef void (*Talker__HadiskOpsReq_Closure)
                 (const Talker__HadiskOpsReq *message,
                  void *closure_data);
typedef void (*Talker__HWDevInterfaceAttachReq_Closure)
                 (const Talker__HWDevInterfaceAttachReq *message,
                  void *closure_data);
typedef void (*Talker__HWDevInterfaceDetachReq_Closure)
                 (const Talker__HWDevInterfaceDetachReq *message,
                  void *closure_data);
typedef void (*Talker__HWDevOpsReply_Closure)
                 (const Talker__HWDevOpsReply *message,
                  void *closure_data);
typedef void (*Talker__InterfaceAttachReq_Closure)
                 (const Talker__InterfaceAttachReq *message,
                  void *closure_data);
typedef void (*Talker__InterfaceDetachReq_Closure)
                 (const Talker__InterfaceDetachReq *message,
                  void *closure_data);
typedef void (*Talker__InterfacesConfigReq_Closure)
                 (const Talker__InterfacesConfigReq *message,
                  void *closure_data);
typedef void (*Talker__InterfacesOpsReply_Closure)
                 (const Talker__InterfacesOpsReply *message,
                  void *closure_data);
typedef void (*Talker__PMAddReq_Closure)
                 (const Talker__PMAddReq *message,
                  void *closure_data);
typedef void (*Talker__PMOpsReq_Closure)
                 (const Talker__PMOpsReq *message,
                  void *closure_data);
typedef void (*Talker__PMNic_Closure)
                 (const Talker__PMNic *message,
                  void *closure_data);
typedef void (*Talker__PMDeployReq_Closure)
                 (const Talker__PMDeployReq *message,
                  void *closure_data);
typedef void (*Talker__PMOpsReply_Closure)
                 (const Talker__PMOpsReply *message,
                  void *closure_data);
typedef void (*Talker__HostBootReq_Closure)
                 (const Talker__HostBootReq *message,
                  void *closure_data);
typedef void (*Talker__HostOpsReply_Closure)
                 (const Talker__HostOpsReply *message,
                  void *closure_data);
typedef void (*Talker__ChargeStatsReq_Closure)
                 (const Talker__ChargeStatsReq *message,
                  void *closure_data);
typedef void (*Talker__OrderChargeReq_Closure)
                 (const Talker__OrderChargeReq *message,
                  void *closure_data);
typedef void (*Talker__OrderChargeVM_Closure)
                 (const Talker__OrderChargeVM *message,
                  void *closure_data);
typedef void (*Talker__OrderChargeVGW_Closure)
                 (const Talker__OrderChargeVGW *message,
                  void *closure_data);
typedef void (*Talker__OrderChargeISP_Closure)
                 (const Talker__OrderChargeISP *message,
                  void *closure_data);
typedef void (*Talker__OrderChargeBW_Closure)
                 (const Talker__OrderChargeBW *message,
                  void *closure_data);
typedef void (*Talker__ChargeStatsReply_Closure)
                 (const Talker__ChargeStatsReply *message,
                  void *closure_data);
typedef void (*Talker__OrderChargeReply_Closure)
                 (const Talker__OrderChargeReply *message,
                  void *closure_data);
typedef void (*Talker__VmadapterVmLearnReq_Closure)
                 (const Talker__VmadapterVmLearnReq *message,
                  void *closure_data);
typedef void (*Talker__VmadapterVmLearnReply_Closure)
                 (const Talker__VmadapterVmLearnReply *message,
                  void *closure_data);
typedef void (*Talker__Message_Closure)
                 (const Talker__Message *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    talker__alloc_type__descriptor;
extern const ProtobufCEnumDescriptor    talker__result__descriptor;
extern const ProtobufCEnumDescriptor    talker__vm_type__descriptor;
extern const ProtobufCEnumDescriptor    talker__vm_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__vgateway_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__valve_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__networks_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__vmwaf_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__hadisk_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__hwdev_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__interface_ops__descriptor;
extern const ProtobufCEnumDescriptor    talker__resource_type__descriptor;
extern const ProtobufCEnumDescriptor    talker__resource_state__descriptor;
extern const ProtobufCEnumDescriptor    talker__modify_mask__descriptor;
extern const ProtobufCEnumDescriptor    talker__ha_switch_mode__descriptor;
extern const ProtobufCEnumDescriptor    talker__httpops__descriptor;
extern const ProtobufCEnumDescriptor    talker__south_dest__descriptor;
extern const ProtobufCEnumDescriptor    talker__south_uri__descriptor;
extern const ProtobufCEnumDescriptor    talker__pmostype__descriptor;
extern const ProtobufCEnumDescriptor    talker__pmops__descriptor;
extern const ProtobufCEnumDescriptor    talker__pmstates__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__vgateway_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__valve_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__networks_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__vmwaf_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__vl2_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vl2_del_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vl2_modify_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_replace_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_delete_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_start_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_stop_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_modify_req__descriptor;
extern const ProtobufCMessageDescriptor talker__torswitch_modify_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_isolate_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_release_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_create_snapshot_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_revert_snapshot_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_delete_snapshot_req__descriptor;
extern const ProtobufCMessageDescriptor talker__third_vm_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vm_migrate_req__descriptor;
extern const ProtobufCMessageDescriptor talker__notify_proactive__descriptor;
extern const ProtobufCMessageDescriptor talker__notify_bundle_proactive__descriptor;
extern const ProtobufCMessageDescriptor talker__vgw_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgateway_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__valve_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgw_start_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgw_stop_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgw_modify_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgateway_modify_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgateway_migrate_req__descriptor;
extern const ProtobufCMessageDescriptor talker__valve_modify_req__descriptor;
extern const ProtobufCMessageDescriptor talker__valve_migrate_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgw_del_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgateway_del_req__descriptor;
extern const ProtobufCMessageDescriptor talker__valve_del_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vgw_switch_opt__descriptor;
extern const ProtobufCMessageDescriptor talker__vgw_switch_req__descriptor;
extern const ProtobufCMessageDescriptor talker__third_vgw_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__tunnel_qos__descriptor;
extern const ProtobufCMessageDescriptor talker__gre__descriptor;
extern const ProtobufCMessageDescriptor talker__vmwaf_add_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vmwaf_del_req__descriptor;
extern const ProtobufCMessageDescriptor talker__south_req__descriptor;
extern const ProtobufCMessageDescriptor talker__south_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__hadisk_ops_req__descriptor;
extern const ProtobufCMessageDescriptor talker__hwdev_interface_attach_req__descriptor;
extern const ProtobufCMessageDescriptor talker__hwdev_interface_detach_req__descriptor;
extern const ProtobufCMessageDescriptor talker__hwdev_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__interface_attach_req__descriptor;
extern const ProtobufCMessageDescriptor talker__interface_detach_req__descriptor;
extern const ProtobufCMessageDescriptor talker__interfaces_config_req__descriptor;
extern const ProtobufCMessageDescriptor talker__interfaces_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__pmadd_req__descriptor;
extern const ProtobufCMessageDescriptor talker__pmops_req__descriptor;
extern const ProtobufCMessageDescriptor talker__pmnic__descriptor;
extern const ProtobufCMessageDescriptor talker__pmdeploy_req__descriptor;
extern const ProtobufCMessageDescriptor talker__pmops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__host_boot_req__descriptor;
extern const ProtobufCMessageDescriptor talker__host_ops_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__charge_stats_req__descriptor;
extern const ProtobufCMessageDescriptor talker__order_charge_req__descriptor;
extern const ProtobufCMessageDescriptor talker__order_charge_vm__descriptor;
extern const ProtobufCMessageDescriptor talker__order_charge_vgw__descriptor;
extern const ProtobufCMessageDescriptor talker__order_charge_isp__descriptor;
extern const ProtobufCMessageDescriptor talker__order_charge_bw__descriptor;
extern const ProtobufCMessageDescriptor talker__charge_stats_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__order_charge_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__vmadapter_vm_learn_req__descriptor;
extern const ProtobufCMessageDescriptor talker__vmadapter_vm_learn_reply__descriptor;
extern const ProtobufCMessageDescriptor talker__message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_talker_2eproto__INCLUDED */
