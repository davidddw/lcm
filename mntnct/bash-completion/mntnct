_mntnct()
{
    local cur prev words cword

    COMPREPLY=()
    _get_comp_words_by_ref cur prev words cword

    mntnct=mt

    j=0
    for ((i=0;i<=$cword;i++)); do
        if [[ "${words[$i]}" = "=" ]]; then
            j=$(expr $j - 1)
            old_words[$j]="${old_words[$j]}${words[$i]}"
            if [[ "$i" -lt "$cword" ]]; then
                i=$(expr $i + 1)
                old_words[$j]="${old_words[$j]}${words[$i]}"
            fi
            j=$(expr $j + 1)
        else
            old_words[$j]="${words[$i]}"
            j=$(expr $j + 1)
        fi
    done
    cword=$(expr $j - 1)

    if [[ $cword -eq 1 ]] || [[ $cword -eq 2 && "${old_words[1]}" == "help" ]]; then
        opts=`$mntnct help --minimal 2>/dev/null | sed -e 's/,/\ /g'`
        COMPREPLY=( $( compgen -W '$opts' -- "$cur" ) )
        return 0
    fi

    if echo ${old_words[$cword]} | grep "=" > /dev/null; then
        local obj op param value
        obj=`echo ${old_words[1]} | cut -d'.' -f1`
        op=`echo ${old_words[1]} | cut -d'.' -f2`
        param=`echo ${old_words[$cword]} | cut -d= -f1`
        value=`echo ${old_words[$cword]} | cut -d= -f2`

        case "$param" in
        id|name|ip|datacenter_name|ipmi_ip|lcuuid)
            if [[ "$obj" = 'storage' && "$param" = 'id' ]]; then
                opts=`$mntnct storage.list params=l.id 2>/dev/null | tail -n+2`
                COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            elif [[ "$op" != 'add' ]] && ! [[ "$param" = 'name' && "$op" = *'join' ]]; then
                opts=`$mntnct $obj.list params=$param --minimal 2>/dev/null |
                          sed -e 's/,/\ /g'`
                COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            fi
            return 0
            ;;

        server_id)
            obj=`echo ${param} | cut -d_ -f1`
            opts=`$mntnct vcserver.list --minimal 2>/dev/null |
                      sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        torswitch_id)
            opts=`$mntnct torswitch.list params=id  --minimal 2>/dev/null |
                     sed -e 's/,/\ /g'`
            echo $opts
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        user_name)
            opts=`$mntnct user.list params=username --minimal 2>/dev/null |
                     sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        vgw_name)
            __opts=`$mntnct vgateway.list params=name 2>/dev/null | grep -wv name`
            opts=`echo $__opts`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        vm_name)
            __opts=`$mntnct vm.list params=name 2>/dev/null | grep -wv name`
            opts=`echo $__opts`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        devicetype)
            opts='VM VGATEWAY'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        deviceid)
            opts=`$mntnct vif.list params=deviceid --minimal 2>/dev/null |
                     sed -e 's/,/\n/g' | sort | uniq`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        ifindex)
            opts=`$mntnct vif.list params=ifindex --minimal 2>/dev/null |
                     sed -e 's/,/\n/g' | sort | uniq`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        *id)
            obj=${param%%id}
            opts=`$mntnct $obj.list --minimal 2>/dev/null |
                      sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        port_name)
           opts=`$mntnct $obj.list params=name  --minimal 2>/dev/null |
                     sed -e 's/,/\ /g'`
           COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
           return 0
           ;;

        product_specification|product-specification)
           opts=`$mntnct product-specification.list params=plan_name  --minimal 2>/dev/null |
                     sed -e 's/,/\ /g'`
           COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
           return 0
           ;;

        *_name)
            obj=`echo $param | cut -d_ -f1`
            opts=`$mntnct $obj.list params=name --minimal 2>/dev/null |
                      sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        host_ip)
            opts=`$mntnct $obj.list params=host_ip  --minimal 2>/dev/null |
                      sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        host|ip|ip1|ip2)
            if [[ "$obj" = 'storage' && "$op" == 'add' ]]; then
                opts=`$mntnct host.list params=ip --minimal 2>/dev/null |
                          sed -e 's/,/\ /g'`
                COMPREPLY=( $( compgen -W '$opts all' -- "$value" ) )
            elif [[ "$obj" = 'storage' ]]; then
                opts=`$mntnct storage.list params=r.host_address 2>/dev/null |
                          tail -n+2`
                COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            elif [[ "$obj" == 'host' && "$op" != 'add' ]] || [[ "$obj" == 'ipmi' ]]; then
                opts=`$mntnct host.list params=ip --minimal 2>/dev/null |
                          sed -e 's/,/\ /g'`
                COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            fi
            return 0
            ;;

        params)
            opts=`$mntnct $obj.list 2>/dev/null | head -n1 | sed 's/\s\+/ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        type)
            if [[ "$obj" == 'tunnel-protocol' ]]; then
                opts='GRE VXLAN'
            elif [[ "$obj" == 'ip-ranges' ]]; then
                opts='CONTROLLER VM_CTRL SERVER_CTRL VM_SERVICE SERVICE_PROVIDER'
            elif [[ "$obj" == 'hwdev' ]]; then
                opts='COMPUTE NETWORK STORAGE SECURITY'
            elif [[ "$obj" == 'storage' ]]; then
                opts='CAPACITY PERFORMANCE'
            elif [[ "$obj" != 'template' ]]; then
                opts='Gateway VM NSP TPD'
            fi
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        role)
            if [[ "$obj" == 'hwdev' ]]; then
                opts='GENERAL_PURPOSE LOAD_BALANCER DATABASE WEB_SERVER APP_SERVER FIREWALL GATEWAY VPN STORAGE WAF'
            elif [[ "$obj" == 'domain' ]]; then
                opts='BSS OSS'
            fi
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        ttype)
            opts='Gateway VM LoadBalancer VWAF Firewall TPD'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        vendor)
            opts='YUNSHAN TOPSEC NSFOCUS'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        ctype|htype)
            opts='Xen VMWare KVM'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        stype)
            opts='local shared'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        speed)
            opts='1000Mbps 10000Mbps'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        iptype)
            opts='global exclusive'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        log-level)
            opts='DEBUG INFO WARNING ERR NONE'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        component)
            opts='lcmd vmdriver lcpd'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        ISP)
            opts='1 2 3 4 5 6 7 8'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        switch_type)
            opts='Ethernet Tunnel'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        switch_brand)
            opts='CENTEC_E350 ARISTA_7150 ARISTA_7050 others'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        port_type)
            opts='DATA CTRL DATA_PUBLIC'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        EPC_user)
            opts=`$mntnct user.list params=username --minimal 2>/dev/null |
                      sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        brand)
            opts='DELL HUAWEI non-managed'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        service_type)
            opts='Vul_Scanner Nas_Storage Cloud_disk Backup'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        service_vendor)
            opts='NSFOCUS EISOO'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        instance_type)
            opts='VM'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        nic_type)
            opts='Gigabit 10Gigabit'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        os_type)
            opts=`$mntnct ipmi.deploy 2>&1 | grep 'Supported systems are:' |
                    cut -d: -f2 | sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        launch-server)
            opts=`$mntnct host.list params=ip --minimal 2>/dev/null |
                    sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        product-type)
            opts='VM VGW third-party-device IP bandwidth sys_vul_scanner web_vul_scanner nas_storage load_balancer cloud_disk vm-snapshot'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        mode)
            opts='auto manual'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        state)
            opts='online offline'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        domain)
           opts=`$mntnct domain.list params=name  --minimal 2>/dev/null |
                     sed -e 's/,/\ /g'`
           COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
           return 0
           ;;

        hwdev_name)
           opts=`$mntnct hwdev.list params=name  --minimal 2>/dev/null |
                     sed -e 's/,/\ /g'`
           COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
           return 0
           ;;

        task_type)
            opts='system web'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        backend)
            opts='ceph-rbd'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        user-email)
            opts=`$mntnct user.list params=email --minimal 2>/dev/null |
                      sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        os)
            opts=`$mntnct template.list params=name --minimal 2>/dev/null |
                      sed -e 's/,/\ /g'`
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        in_mode)
            opts='gateway access'
            COMPREPLY=( $( compgen -W '$opts' -- "$value" ) )
            return 0
            ;;

        *)
            return 0
            ;;

        esac
    else
        opts=`$mntnct help ${old_words[1]} 2>/dev/null | grep '^[^:]*params' |
                  cut -d: -f2- | egrep -v "^ $" | cut -c 2- |
                  sed -e 's/,/=,/g' -e 's/$/=/g' -e 's/:=/:/g' -e 's/-=/-/g' \
                      -e 's/ //g' -e 's/,/\ /g'`
        COMPREPLY=( $( compgen -W '$opts' -- "$cur" ) )
        compopt -o nospace
        return 0
    fi

    return 0
}

complete -F _mntnct mntnct
complete -F _mntnct mt
